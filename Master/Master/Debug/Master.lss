
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b9e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  00000c12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002033  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c56  00000000  00000000  00002e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001428  00000000  00000000  00003aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00004ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d4  00000000  00000000  00005244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000125b  00000000  00000000  00005818  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__vector_1>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_11>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	56 01       	movw	r10, r12
  56:	5a 01       	movw	r10, r20
  58:	5e 01       	movw	r10, r28
  5a:	62 01       	movw	r12, r4
  5c:	66 01       	movw	r12, r12
  5e:	6a 01       	movw	r12, r20
  60:	6e 01       	movw	r12, r28
  62:	72 01       	movw	r14, r4

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	ae 36       	cpi	r26, 0x6E	; 110
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 90 00 	call	0x120	; 0x120 <main>
  84:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <ovf_isr>:

static void ovf_isr(void){
	
	
	
	count_ovf++;
  8c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <count_ovf>
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <count_ovf>
  96:	08 95       	ret

00000098 <INT_isr>:

static void INT_isr(void){
	
	static uint8_t count;
	
	count++;
  98:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if(count>=1 && READBIT(PIND,2)== 1)
  a2:	88 23       	and	r24, r24
  a4:	51 f0       	breq	.+20     	; 0xba <INT_isr+0x22>
  a6:	82 9b       	sbis	0x10, 2	; 16
  a8:	08 c0       	rjmp	.+16     	; 0xba <INT_isr+0x22>
	{
		TIMER0_normaMode_ON();
  aa:	0e 94 39 05 	call	0xa72	; 0xa72 <TIMER0_normaMode_ON>
		count=1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		flag=1;
  b4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <flag>
  b8:	08 95       	ret
		
		
	}else if (count== 2 && flag==1)
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	81 f5       	brne	.+96     	; 0x11e <INT_isr+0x86>
  be:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flag>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	61 f5       	brne	.+88     	; 0x11e <INT_isr+0x86>
	{
		
		t1 = (((TCNT0+(count_ovf*256)) * 34600)* 64/ F_CPU*2)/4;
  c6:	82 b7       	in	r24, 0x32	; 50
  c8:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <count_ovf>
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ba 2f       	mov	r27, r26
  d0:	aa 27       	eor	r26, r26
  d2:	a8 0f       	add	r26, r24
  d4:	b1 1d       	adc	r27, r1
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	3a ec       	ldi	r19, 0xCA	; 202
  da:	41 e2       	ldi	r20, 0x21	; 33
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	0e 94 ab 05 	call	0xb56	; 0xb56 <__mulshisi3>
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	34 e2       	ldi	r19, 0x24	; 36
  e6:	44 ef       	ldi	r20, 0xF4	; 244
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	0e 94 83 05 	call	0xb06	; 0xb06 <__udivmodsi4>
  ee:	da 01       	movw	r26, r20
  f0:	c9 01       	movw	r24, r18
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	aa 1f       	adc	r26, r26
  f8:	bb 1f       	adc	r27, r27
  fa:	b6 95       	lsr	r27
  fc:	a7 95       	ror	r26
  fe:	97 95       	ror	r25
 100:	87 95       	ror	r24
 102:	b6 95       	lsr	r27
 104:	a7 95       	ror	r26
 106:	97 95       	ror	r25
 108:	87 95       	ror	r24
 10a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <t1>
		flag=0;
 10e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <flag>
		TIMER0_normaMode_OFF();
 112:	0e 94 44 05 	call	0xa88	; 0xa88 <TIMER0_normaMode_OFF>
		count=0;
 116:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		count_ovf=0;
 11a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count_ovf>
 11e:	08 95       	ret

00000120 <main>:
static void INT_isr(void);

int main(void)
{
	
	Interrupt_isr=INT_isr;
 120:	8c e4       	ldi	r24, 0x4C	; 76
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Interrupt_isr+0x1>
 128:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Interrupt_isr>
	timer0_ovf_isr = ovf_isr;
 12c:	86 e4       	ldi	r24, 0x46	; 70
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <timer0_ovf_isr+0x1>
 134:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <timer0_ovf_isr>
	INTERUPT_INPUT_CAPTURE_init();
 138:	0e 94 02 05 	call	0xa04	; 0xa04 <INTERUPT_INPUT_CAPTURE_init>
	GLCD_Init();
 13c:	0e 94 19 01 	call	0x232	; 0x232 <GLCD_Init>
	Draw_Graph();
 140:	0e 94 da 02 	call	0x5b4	; 0x5b4 <Draw_Graph>
	LCD_init();
 144:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_init>
	UART_init();
 148:	0e 94 76 05 	call	0xaec	; 0xaec <UART_init>
	ULTRA_SONIC_init();
 14c:	0e 94 94 04 	call	0x928	; 0x928 <ULTRA_SONIC_init>
	uint8_t distance_y=0,distance_x=0;
	
	while (1)
	{
		
		LCD_write_command(0x80);
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
		distance_x= ULTRA_SONIC_distance();
 156:	0e 94 a8 04 	call	0x950	; 0x950 <ULTRA_SONIC_distance>
 15a:	c8 2f       	mov	r28, r24
		LCD_write_num(distance_x);
 15c:	68 2f       	mov	r22, r24
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_write_num>
		distance_y=t1;
 168:	d0 91 68 00 	lds	r29, 0x0068	; 0x800068 <t1>
		LCD_write_command(0xc0);
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
		LCD_write_num(distance_y);
 172:	6d 2f       	mov	r22, r29
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_write_num>
		
		UART_Transmit(distance_x);
 17e:	8c 2f       	mov	r24, r28
 180:	0e 94 7f 05 	call	0xafe	; 0xafe <UART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x68>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x6e>
 18e:	00 00       	nop
		_delay_ms(1);
		UART_Transmit(distance_y);
 190:	8d 2f       	mov	r24, r29
 192:	0e 94 7f 05 	call	0xafe	; 0xafe <UART_Transmit>
		GLCD_GoToXY_shape(distance_x , distance_y);
 196:	6d 2f       	mov	r22, r29
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 67 02 	call	0x4ce	; 0x4ce <GLCD_GoToXY_shape>
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	20 e7       	ldi	r18, 0x70	; 112
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	91 50       	subi	r25, 0x01	; 1
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x84>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x8e>
 1ae:	00 00       	nop
		_delay_ms(50);
		GLCD_Clear(distance_x , distance_y);
 1b0:	6d 2f       	mov	r22, r29
 1b2:	8c 2f       	mov	r24, r28
 1b4:	0e 94 ae 01 	call	0x35c	; 0x35c <GLCD_Clear>
 1b8:	cb cf       	rjmp	.-106    	; 0x150 <main+0x30>

000001ba <GLCD_SelectChip>:
    uint8_t i;
    for( i=0 ; i<6 ; i++ ) // 5x7 font, 5 chars + 1 blankspace
    {
        GLCD_DataWrite(ptr_array[i]);
    }  
}
 1ba:	8f 30       	cpi	r24, 0x0F	; 15
 1bc:	b9 f0       	breq	.+46     	; 0x1ec <GLCD_SelectChip+0x32>
 1be:	18 f4       	brcc	.+6      	; 0x1c6 <GLCD_SelectChip+0xc>
 1c0:	88 23       	and	r24, r24
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <GLCD_SelectChip+0x16>
 1c4:	08 95       	ret
 1c6:	80 3f       	cpi	r24, 0xF0	; 240
 1c8:	51 f0       	breq	.+20     	; 0x1de <GLCD_SelectChip+0x24>
 1ca:	8f 3f       	cpi	r24, 0xFF	; 255
 1cc:	b1 f0       	breq	.+44     	; 0x1fa <GLCD_SelectChip+0x40>
 1ce:	08 95       	ret
 1d0:	85 b3       	in	r24, 0x15	; 21
 1d2:	87 7f       	andi	r24, 0xF7	; 247
 1d4:	85 bb       	out	0x15, r24	; 21
 1d6:	85 b3       	in	r24, 0x15	; 21
 1d8:	8f 7e       	andi	r24, 0xEF	; 239
 1da:	85 bb       	out	0x15, r24	; 21
 1dc:	08 95       	ret
 1de:	85 b3       	in	r24, 0x15	; 21
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	85 bb       	out	0x15, r24	; 21
 1e4:	85 b3       	in	r24, 0x15	; 21
 1e6:	8f 7e       	andi	r24, 0xEF	; 239
 1e8:	85 bb       	out	0x15, r24	; 21
 1ea:	08 95       	ret
 1ec:	85 b3       	in	r24, 0x15	; 21
 1ee:	87 7f       	andi	r24, 0xF7	; 247
 1f0:	85 bb       	out	0x15, r24	; 21
 1f2:	85 b3       	in	r24, 0x15	; 21
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
 1fa:	85 b3       	in	r24, 0x15	; 21
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	85 bb       	out	0x15, r24	; 21
 200:	85 b3       	in	r24, 0x15	; 21
 202:	80 61       	ori	r24, 0x10	; 16
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret

00000208 <GLCD_CmdWrite>:
 208:	8b bb       	out	0x1b, r24	; 27
 20a:	85 b3       	in	r24, 0x15	; 21
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	85 bb       	out	0x15, r24	; 21
 210:	85 b3       	in	r24, 0x15	; 21
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	85 bb       	out	0x15, r24	; 21
 216:	8f e8       	ldi	r24, 0x8F	; 143
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <GLCD_CmdWrite+0x12>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <GLCD_CmdWrite+0x18>
 220:	00 00       	nop
 222:	85 b3       	in	r24, 0x15	; 21
 224:	81 60       	ori	r24, 0x01	; 1
 226:	85 bb       	out	0x15, r24	; 21
 228:	95 e3       	ldi	r25, 0x35	; 53
 22a:	9a 95       	dec	r25
 22c:	f1 f7       	brne	.-4      	; 0x22a <GLCD_CmdWrite+0x22>
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <GLCD_Init>:
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	84 bb       	out	0x14, r24	; 20
 236:	8a bb       	out	0x1a, r24	; 26
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	85 bb       	out	0x15, r24	; 21
 240:	85 b3       	in	r24, 0x15	; 21
 242:	81 60       	ori	r24, 0x01	; 1
 244:	85 bb       	out	0x15, r24	; 21
 246:	85 b3       	in	r24, 0x15	; 21
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	85 b3       	in	r24, 0x15	; 21
 24e:	8b 7f       	andi	r24, 0xFB	; 251
 250:	85 bb       	out	0x15, r24	; 21
 252:	85 e3       	ldi	r24, 0x35	; 53
 254:	8a 95       	dec	r24
 256:	f1 f7       	brne	.-4      	; 0x254 <GLCD_Init+0x22>
 258:	00 00       	nop
 25a:	85 b3       	in	r24, 0x15	; 21
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	85 bb       	out	0x15, r24	; 21
 260:	85 e3       	ldi	r24, 0x35	; 53
 262:	8a 95       	dec	r24
 264:	f1 f7       	brne	.-4      	; 0x262 <GLCD_Init+0x30>
 266:	00 00       	nop
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	8d 7f       	andi	r24, 0xFD	; 253
 26c:	85 bb       	out	0x15, r24	; 21
 26e:	85 b3       	in	r24, 0x15	; 21
 270:	88 60       	ori	r24, 0x08	; 8
 272:	85 bb       	out	0x15, r24	; 21
 274:	85 b3       	in	r24, 0x15	; 21
 276:	80 61       	ori	r24, 0x10	; 16
 278:	85 bb       	out	0x15, r24	; 21
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 280:	80 ec       	ldi	r24, 0xC0	; 192
 282:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 286:	85 b3       	in	r24, 0x15	; 21
 288:	87 7f       	andi	r24, 0xF7	; 247
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	85 b3       	in	r24, 0x15	; 21
 28e:	8f 7e       	andi	r24, 0xEF	; 239
 290:	85 bb       	out	0x15, r24	; 21
 292:	85 b3       	in	r24, 0x15	; 21
 294:	81 60       	ori	r24, 0x01	; 1
 296:	85 bb       	out	0x15, r24	; 21
 298:	08 95       	ret

0000029a <GLCD_SelectPage>:
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	88 30       	cpi	r24, 0x08	; 8
 29e:	91 05       	cpc	r25, r1
 2a0:	20 f5       	brcc	.+72     	; 0x2ea <GLCD_SelectPage+0x50>
 2a2:	fc 01       	movw	r30, r24
 2a4:	e6 5d       	subi	r30, 0xD6	; 214
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__tablejump2__>
 2ac:	88 eb       	ldi	r24, 0xB8	; 184
 2ae:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 2b2:	08 95       	ret
 2b4:	89 eb       	ldi	r24, 0xB9	; 185
 2b6:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 2ba:	08 95       	ret
 2bc:	8a eb       	ldi	r24, 0xBA	; 186
 2be:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 2c2:	08 95       	ret
 2c4:	8b eb       	ldi	r24, 0xBB	; 187
 2c6:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 2ca:	08 95       	ret
 2cc:	8c eb       	ldi	r24, 0xBC	; 188
 2ce:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 2d2:	08 95       	ret
 2d4:	8d eb       	ldi	r24, 0xBD	; 189
 2d6:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 2da:	08 95       	ret
 2dc:	8e eb       	ldi	r24, 0xBE	; 190
 2de:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 2e2:	08 95       	ret
 2e4:	8f eb       	ldi	r24, 0xBF	; 191
 2e6:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 2ea:	08 95       	ret

000002ec <GLCD_GoToXY>:
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	68 30       	cpi	r22, 0x08	; 8
 2f2:	e0 f4       	brcc	.+56     	; 0x32c <GLCD_GoToXY+0x40>
 2f4:	88 23       	and	r24, r24
 2f6:	d4 f0       	brlt	.+52     	; 0x32c <GLCD_GoToXY+0x40>
 2f8:	d6 2f       	mov	r29, r22
 2fa:	c8 2f       	mov	r28, r24
 2fc:	80 34       	cpi	r24, 0x40	; 64
 2fe:	58 f4       	brcc	.+22     	; 0x316 <GLCD_GoToXY+0x2a>
 300:	80 ef       	ldi	r24, 0xF0	; 240
 302:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GLCD_SelectChip>
 306:	8d 2f       	mov	r24, r29
 308:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
 30c:	8c 2f       	mov	r24, r28
 30e:	80 64       	ori	r24, 0x40	; 64
 310:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 314:	0b c0       	rjmp	.+22     	; 0x32c <GLCD_GoToXY+0x40>
 316:	c0 54       	subi	r28, 0x40	; 64
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GLCD_SelectChip>
 31e:	8d 2f       	mov	r24, r29
 320:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
 324:	8c 2f       	mov	r24, r28
 326:	80 64       	ori	r24, 0x40	; 64
 328:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <GLCD_DataWrite>:
 332:	8b bb       	out	0x1b, r24	; 27
 334:	85 b3       	in	r24, 0x15	; 21
 336:	82 60       	ori	r24, 0x02	; 2
 338:	85 bb       	out	0x15, r24	; 21
 33a:	85 b3       	in	r24, 0x15	; 21
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	85 bb       	out	0x15, r24	; 21
 340:	8f e8       	ldi	r24, 0x8F	; 143
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <GLCD_DataWrite+0x12>
 348:	00 c0       	rjmp	.+0      	; 0x34a <GLCD_DataWrite+0x18>
 34a:	00 00       	nop
 34c:	85 b3       	in	r24, 0x15	; 21
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	85 bb       	out	0x15, r24	; 21
 352:	95 e3       	ldi	r25, 0x35	; 53
 354:	9a 95       	dec	r25
 356:	f1 f7       	brne	.-4      	; 0x354 <GLCD_DataWrite+0x22>
 358:	00 00       	nop
 35a:	08 95       	ret

0000035c <GLCD_Clear>:




void GLCD_Clear(uint8_t x , uint8_t y)
{
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
   
   uint8_t real_y=y;
   uint8_t dot=0;
   if( (y < 64) && (y >= 0) && (x < 128) && (x >=0) )
 362:	60 34       	cpi	r22, 0x40	; 64
 364:	08 f0       	brcs	.+2      	; 0x368 <GLCD_Clear+0xc>
 366:	69 c0       	rjmp	.+210    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 368:	88 23       	and	r24, r24
 36a:	0c f4       	brge	.+2      	; 0x36e <GLCD_Clear+0x12>
 36c:	66 c0       	rjmp	.+204    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 36e:	c8 2f       	mov	r28, r24
   {
	   y=y/8;
 370:	d6 2f       	mov	r29, r22
 372:	d6 95       	lsr	r29
 374:	d6 95       	lsr	r29
 376:	d6 95       	lsr	r29
	   dot= real_y - (y*8);
	   if(x<64)
 378:	80 34       	cpi	r24, 0x40	; 64
 37a:	78 f5       	brcc	.+94     	; 0x3da <GLCD_Clear+0x7e>
	   {
		   GLCD_SelectChip(0xf0);
 37c:	80 ef       	ldi	r24, 0xF0	; 240
 37e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GLCD_SelectChip>
		   GLCD_SelectPage(7-y);
 382:	87 e0       	ldi	r24, 0x07	; 7
 384:	8d 1b       	sub	r24, r29
 386:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
		   GLCD_CmdWrite( ( x | (1<<6) ) );
 38a:	8c 2f       	mov	r24, r28
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   GLCD_CmdWrite( ( (x-1) | (1<<6) ) );
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	8c 0f       	add	r24, r28
 39c:	80 64       	ori	r24, 0x40	; 64
 39e:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   GLCD_CmdWrite( ( (x-2) | (1<<6) ) );
 3a8:	8e ef       	ldi	r24, 0xFE	; 254
 3aa:	8c 0f       	add	r24, r28
 3ac:	80 64       	ori	r24, 0x40	; 64
 3ae:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   GLCD_CmdWrite( ( (x+1) | (1<<6) ) );
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	8c 0f       	add	r24, r28
 3bc:	80 64       	ori	r24, 0x40	; 64
 3be:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   GLCD_CmdWrite( ( (x+2) | (1<<6) ) );
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	8c 0f       	add	r24, r28
 3cc:	80 64       	ori	r24, 0x40	; 64
 3ce:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
 3d8:	30 c0       	rjmp	.+96     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	   }
	   else
	   {
		   x-=64;
 3da:	10 ec       	ldi	r17, 0xC0	; 192
 3dc:	18 0f       	add	r17, r24
		   GLCD_SelectChip(0x0f);
 3de:	8f e0       	ldi	r24, 0x0F	; 15
 3e0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GLCD_SelectChip>
		   GLCD_SelectPage(7-y);
 3e4:	87 e0       	ldi	r24, 0x07	; 7
 3e6:	8d 1b       	sub	r24, r29
 3e8:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
		   GLCD_CmdWrite( ( x | (1<<6) ) );
 3ec:	81 2f       	mov	r24, r17
 3ee:	80 64       	ori	r24, 0x40	; 64
 3f0:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   GLCD_CmdWrite( ( (x-1) | (1<<6) ) );
 3fa:	8f eb       	ldi	r24, 0xBF	; 191
 3fc:	8c 0f       	add	r24, r28
 3fe:	80 64       	ori	r24, 0x40	; 64
 400:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   GLCD_CmdWrite( ( (x-2) | (1<<6) ) );
 40a:	8e eb       	ldi	r24, 0xBE	; 190
 40c:	8c 0f       	add	r24, r28
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   GLCD_CmdWrite( ( (x+1) | (1<<6) ) );
 41a:	81 ec       	ldi	r24, 0xC1	; 193
 41c:	8c 0f       	add	r24, r28
 41e:	80 64       	ori	r24, 0x40	; 64
 420:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   GLCD_CmdWrite( ( (x+2) | (1<<6) ) );
 42a:	82 ec       	ldi	r24, 0xC2	; 194
 42c:	8c 0f       	add	r24, r28
 42e:	80 64       	ori	r24, 0x40	; 64
 430:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
		   GLCD_DataWrite(0);
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
		   
	   }
   }
   

}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	08 95       	ret

00000442 <GLCD_GoToXY_dot>:



void GLCD_GoToXY_dot(uint8_t x , uint8_t y)// x 0-127 , y 0-64
{
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
	uint8_t real_y=y;
	uint8_t dot=0;
	if( (y < 64) && (y >= 0) && (x < 128) && (x >=0) )
 448:	60 34       	cpi	r22, 0x40	; 64
 44a:	e8 f5       	brcc	.+122    	; 0x4c6 <GLCD_GoToXY_dot+0x84>
 44c:	88 23       	and	r24, r24
 44e:	dc f1       	brlt	.+118    	; 0x4c6 <GLCD_GoToXY_dot+0x84>
 450:	d8 2f       	mov	r29, r24
	{
		y=y/8;
 452:	16 2f       	mov	r17, r22
 454:	16 95       	lsr	r17
 456:	16 95       	lsr	r17
 458:	16 95       	lsr	r17
		dot= real_y - (y*8);
 45a:	81 2f       	mov	r24, r17
 45c:	88 0f       	add	r24, r24
 45e:	88 0f       	add	r24, r24
 460:	88 0f       	add	r24, r24
 462:	c6 2f       	mov	r28, r22
 464:	c8 1b       	sub	r28, r24
		if(x<64)
 466:	d0 34       	cpi	r29, 0x40	; 64
 468:	b8 f4       	brcc	.+46     	; 0x498 <GLCD_GoToXY_dot+0x56>
		{
			GLCD_SelectChip(0xf0);
 46a:	80 ef       	ldi	r24, 0xF0	; 240
 46c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GLCD_SelectChip>
			GLCD_SelectPage(7-y);
 470:	87 e0       	ldi	r24, 0x07	; 7
 472:	81 1b       	sub	r24, r17
 474:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
			GLCD_CmdWrite( ( x | (1<<6) ) );
 478:	8d 2f       	mov	r24, r29
 47a:	80 64       	ori	r24, 0x40	; 64
 47c:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(1<<(7-dot));
 480:	27 e0       	ldi	r18, 0x07	; 7
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	2c 1b       	sub	r18, r28
 486:	31 09       	sbc	r19, r1
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	01 c0       	rjmp	.+2      	; 0x48e <GLCD_GoToXY_dot+0x4c>
 48c:	88 0f       	add	r24, r24
 48e:	2a 95       	dec	r18
 490:	ea f7       	brpl	.-6      	; 0x48c <GLCD_GoToXY_dot+0x4a>
 492:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
 496:	17 c0       	rjmp	.+46     	; 0x4c6 <GLCD_GoToXY_dot+0x84>
			
		}
		else
		{
			x-=64;
 498:	d0 54       	subi	r29, 0x40	; 64
			GLCD_SelectChip(0x0f);
 49a:	8f e0       	ldi	r24, 0x0F	; 15
 49c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GLCD_SelectChip>
			GLCD_SelectPage(7-y);
 4a0:	87 e0       	ldi	r24, 0x07	; 7
 4a2:	81 1b       	sub	r24, r17
 4a4:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
			GLCD_CmdWrite( ( x | (1<<6) ) );
 4a8:	8d 2f       	mov	r24, r29
 4aa:	80 64       	ori	r24, 0x40	; 64
 4ac:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(1<<(7-dot));
 4b0:	27 e0       	ldi	r18, 0x07	; 7
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	2c 1b       	sub	r18, r28
 4b6:	31 09       	sbc	r19, r1
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <GLCD_GoToXY_dot+0x7c>
 4bc:	88 0f       	add	r24, r24
 4be:	2a 95       	dec	r18
 4c0:	ea f7       	brpl	.-6      	; 0x4bc <GLCD_GoToXY_dot+0x7a>
 4c2:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			
		}
	}

	
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	08 95       	ret

000004ce <GLCD_GoToXY_shape>:


void GLCD_GoToXY_shape(uint8_t x , uint8_t y)// x 0-127 , y 0-64
{
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
	
	uint8_t real_y=y;
	uint8_t dot=0;
	if( (y < 64) && (y >= 0) && (x < 128) && (x >=0) )
 4d4:	60 34       	cpi	r22, 0x40	; 64
 4d6:	08 f0       	brcs	.+2      	; 0x4da <GLCD_GoToXY_shape+0xc>
 4d8:	69 c0       	rjmp	.+210    	; 0x5ac <GLCD_GoToXY_shape+0xde>
 4da:	88 23       	and	r24, r24
 4dc:	0c f4       	brge	.+2      	; 0x4e0 <GLCD_GoToXY_shape+0x12>
 4de:	66 c0       	rjmp	.+204    	; 0x5ac <GLCD_GoToXY_shape+0xde>
 4e0:	c8 2f       	mov	r28, r24
	{
		y=y/8;
 4e2:	d6 2f       	mov	r29, r22
 4e4:	d6 95       	lsr	r29
 4e6:	d6 95       	lsr	r29
 4e8:	d6 95       	lsr	r29
		dot= real_y - (y*8);
		if(x<64)
 4ea:	80 34       	cpi	r24, 0x40	; 64
 4ec:	78 f5       	brcc	.+94     	; 0x54c <GLCD_GoToXY_shape+0x7e>
		{
			GLCD_SelectChip(0xf0);
 4ee:	80 ef       	ldi	r24, 0xF0	; 240
 4f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GLCD_SelectChip>
			GLCD_SelectPage(7-y);
 4f4:	87 e0       	ldi	r24, 0x07	; 7
 4f6:	8d 1b       	sub	r24, r29
 4f8:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
			GLCD_CmdWrite( ( x | (1<<6) ) );
 4fc:	8c 2f       	mov	r24, r28
 4fe:	80 64       	ori	r24, 0x40	; 64
 500:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(124);
 504:	8c e7       	ldi	r24, 0x7C	; 124
 506:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			GLCD_CmdWrite( ( (x-1) | (1<<6) ) );
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	8c 0f       	add	r24, r28
 50e:	80 64       	ori	r24, 0x40	; 64
 510:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(16);
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			GLCD_CmdWrite( ( (x-2) | (1<<6) ) );
 51a:	8e ef       	ldi	r24, 0xFE	; 254
 51c:	8c 0f       	add	r24, r28
 51e:	80 64       	ori	r24, 0x40	; 64
 520:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(16);
 524:	80 e1       	ldi	r24, 0x10	; 16
 526:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			GLCD_CmdWrite( ( (x+1) | (1<<6) ) );
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	8c 0f       	add	r24, r28
 52e:	80 64       	ori	r24, 0x40	; 64
 530:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(16);
 534:	80 e1       	ldi	r24, 0x10	; 16
 536:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			GLCD_CmdWrite( ( (x+2) | (1<<6) ) );
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	8c 0f       	add	r24, r28
 53e:	80 64       	ori	r24, 0x40	; 64
 540:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(16);
 544:	80 e1       	ldi	r24, 0x10	; 16
 546:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
 54a:	30 c0       	rjmp	.+96     	; 0x5ac <GLCD_GoToXY_shape+0xde>
		}
		else
		{
			x-=64;
 54c:	10 ec       	ldi	r17, 0xC0	; 192
 54e:	18 0f       	add	r17, r24
			GLCD_SelectChip(0x0f);
 550:	8f e0       	ldi	r24, 0x0F	; 15
 552:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GLCD_SelectChip>
			GLCD_SelectPage(7-y);
 556:	87 e0       	ldi	r24, 0x07	; 7
 558:	8d 1b       	sub	r24, r29
 55a:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
			GLCD_CmdWrite( ( x | (1<<6) ) );
 55e:	81 2f       	mov	r24, r17
 560:	80 64       	ori	r24, 0x40	; 64
 562:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(124);
 566:	8c e7       	ldi	r24, 0x7C	; 124
 568:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			GLCD_CmdWrite( ( (x-1) | (1<<6) ) );
 56c:	8f eb       	ldi	r24, 0xBF	; 191
 56e:	8c 0f       	add	r24, r28
 570:	80 64       	ori	r24, 0x40	; 64
 572:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(16);
 576:	80 e1       	ldi	r24, 0x10	; 16
 578:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			GLCD_CmdWrite( ( (x-2) | (1<<6) ) );
 57c:	8e eb       	ldi	r24, 0xBE	; 190
 57e:	8c 0f       	add	r24, r28
 580:	80 64       	ori	r24, 0x40	; 64
 582:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(16);
 586:	80 e1       	ldi	r24, 0x10	; 16
 588:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			GLCD_CmdWrite( ( (x+1) | (1<<6) ) );
 58c:	81 ec       	ldi	r24, 0xC1	; 193
 58e:	8c 0f       	add	r24, r28
 590:	80 64       	ori	r24, 0x40	; 64
 592:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(16);
 596:	80 e1       	ldi	r24, 0x10	; 16
 598:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			GLCD_CmdWrite( ( (x+2) | (1<<6) ) );
 59c:	82 ec       	ldi	r24, 0xC2	; 194
 59e:	8c 0f       	add	r24, r28
 5a0:	80 64       	ori	r24, 0x40	; 64
 5a2:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
			GLCD_DataWrite(16);
 5a6:	80 e1       	ldi	r24, 0x10	; 16
 5a8:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
			
		}
	}
	
}
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	08 95       	ret

000005b4 <Draw_Graph>:
void Draw_Graph(void)
{
 5b4:	cf 93       	push	r28
	
	for (uint8_t i=1;i<128;i++)
 5b6:	c1 e0       	ldi	r28, 0x01	; 1
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <Draw_Graph+0x10>
	{
		GLCD_GoToXY_dot(i,2);
 5ba:	62 e0       	ldi	r22, 0x02	; 2
 5bc:	8c 2f       	mov	r24, r28
 5be:	0e 94 21 02 	call	0x442	; 0x442 <GLCD_GoToXY_dot>
	
}
void Draw_Graph(void)
{
	
	for (uint8_t i=1;i<128;i++)
 5c2:	cf 5f       	subi	r28, 0xFF	; 255
 5c4:	cc 23       	and	r28, r28
 5c6:	cc f7       	brge	.-14     	; 0x5ba <Draw_Graph+0x6>
		GLCD_GoToXY_dot(i,2);
		
		
	}
	
	GLCD_CmdWrite(0xB8);
 5c8:	88 eb       	ldi	r24, 0xB8	; 184
 5ca:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
	GLCD_CmdWrite(0x40);
 5ce:	80 e4       	ldi	r24, 0x40	; 64
 5d0:	0e 94 04 01 	call	0x208	; 0x208 <GLCD_CmdWrite>
	GLCD_DataWrite(0);
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
	
	
	for (uint8_t i=0;i<8;i++)
 5da:	c0 e0       	ldi	r28, 0x00	; 0
 5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <Draw_Graph+0x42>
	{
		GLCD_GoToXY_dot(1,1);
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	0e 94 21 02 	call	0x442	; 0x442 <GLCD_GoToXY_dot>
	
		GLCD_SelectPage(7-i);
 5e6:	87 e0       	ldi	r24, 0x07	; 7
 5e8:	8c 1b       	sub	r24, r28
 5ea:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_SelectPage>
		GLCD_DataWrite(0xff);
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
	GLCD_CmdWrite(0xB8);
	GLCD_CmdWrite(0x40);
	GLCD_DataWrite(0);
	
	
	for (uint8_t i=0;i<8;i++)
 5f4:	cf 5f       	subi	r28, 0xFF	; 255
 5f6:	c8 30       	cpi	r28, 0x08	; 8
 5f8:	90 f3       	brcs	.-28     	; 0x5de <Draw_Graph+0x2a>
		GLCD_SelectPage(7-i);
		GLCD_DataWrite(0xff);
		
	}
	
	GLCD_GoToXY(125,7);
 5fa:	67 e0       	ldi	r22, 0x07	; 7
 5fc:	8d e7       	ldi	r24, 0x7D	; 125
 5fe:	0e 94 76 01 	call	0x2ec	; 0x2ec <GLCD_GoToXY>
	GLCD_DataWrite(168);
 602:	88 ea       	ldi	r24, 0xA8	; 168
 604:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
	GLCD_GoToXY(126,7);
 608:	67 e0       	ldi	r22, 0x07	; 7
 60a:	8e e7       	ldi	r24, 0x7E	; 126
 60c:	0e 94 76 01 	call	0x2ec	; 0x2ec <GLCD_GoToXY>
	GLCD_DataWrite(112);
 610:	80 e7       	ldi	r24, 0x70	; 112
 612:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
	GLCD_GoToXY(0,0);
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 76 01 	call	0x2ec	; 0x2ec <GLCD_GoToXY>
	GLCD_DataWrite(4);
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
	GLCD_GoToXY(1,0);
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 76 01 	call	0x2ec	; 0x2ec <GLCD_GoToXY>
	GLCD_DataWrite(2);
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
	GLCD_GoToXY(3,0);
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	0e 94 76 01 	call	0x2ec	; 0x2ec <GLCD_GoToXY>
	GLCD_DataWrite(2);
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
	GLCD_GoToXY(4,0);
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	84 e0       	ldi	r24, 0x04	; 4
 644:	0e 94 76 01 	call	0x2ec	; 0x2ec <GLCD_GoToXY>
	GLCD_DataWrite(4);
 648:	84 e0       	ldi	r24, 0x04	; 4
 64a:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
	GLCD_GoToXY(1,7);
 64e:	67 e0       	ldi	r22, 0x07	; 7
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	0e 94 76 01 	call	0x2ec	; 0x2ec <GLCD_GoToXY>
	GLCD_DataWrite(32);
 656:	80 e2       	ldi	r24, 0x20	; 32
 658:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_DataWrite>
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <LCD_write_command>:
	uint8_t i =0;
	while(data[i] != '\0'){
		LCD_write_data(data[i]);
		i++;
	}
}
 660:	98 b3       	in	r25, 0x18	; 24
 662:	97 7f       	andi	r25, 0xF7	; 247
 664:	98 bb       	out	0x18, r25	; 24
 666:	88 23       	and	r24, r24
 668:	24 f4       	brge	.+8      	; 0x672 <LCD_write_command+0x12>
 66a:	98 b3       	in	r25, 0x18	; 24
 66c:	90 68       	ori	r25, 0x80	; 128
 66e:	98 bb       	out	0x18, r25	; 24
 670:	03 c0       	rjmp	.+6      	; 0x678 <LCD_write_command+0x18>
 672:	98 b3       	in	r25, 0x18	; 24
 674:	9f 77       	andi	r25, 0x7F	; 127
 676:	98 bb       	out	0x18, r25	; 24
 678:	86 ff       	sbrs	r24, 6
 67a:	04 c0       	rjmp	.+8      	; 0x684 <LCD_write_command+0x24>
 67c:	98 b3       	in	r25, 0x18	; 24
 67e:	90 64       	ori	r25, 0x40	; 64
 680:	98 bb       	out	0x18, r25	; 24
 682:	03 c0       	rjmp	.+6      	; 0x68a <LCD_write_command+0x2a>
 684:	98 b3       	in	r25, 0x18	; 24
 686:	9f 7b       	andi	r25, 0xBF	; 191
 688:	98 bb       	out	0x18, r25	; 24
 68a:	85 ff       	sbrs	r24, 5
 68c:	04 c0       	rjmp	.+8      	; 0x696 <LCD_write_command+0x36>
 68e:	98 b3       	in	r25, 0x18	; 24
 690:	90 62       	ori	r25, 0x20	; 32
 692:	98 bb       	out	0x18, r25	; 24
 694:	03 c0       	rjmp	.+6      	; 0x69c <LCD_write_command+0x3c>
 696:	98 b3       	in	r25, 0x18	; 24
 698:	9f 7d       	andi	r25, 0xDF	; 223
 69a:	98 bb       	out	0x18, r25	; 24
 69c:	84 ff       	sbrs	r24, 4
 69e:	04 c0       	rjmp	.+8      	; 0x6a8 <LCD_write_command+0x48>
 6a0:	98 b3       	in	r25, 0x18	; 24
 6a2:	90 61       	ori	r25, 0x10	; 16
 6a4:	98 bb       	out	0x18, r25	; 24
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <LCD_write_command+0x4e>
 6a8:	98 b3       	in	r25, 0x18	; 24
 6aa:	9f 7e       	andi	r25, 0xEF	; 239
 6ac:	98 bb       	out	0x18, r25	; 24
 6ae:	98 b3       	in	r25, 0x18	; 24
 6b0:	94 60       	ori	r25, 0x04	; 4
 6b2:	98 bb       	out	0x18, r25	; 24
 6b4:	ef e9       	ldi	r30, 0x9F	; 159
 6b6:	ff e0       	ldi	r31, 0x0F	; 15
 6b8:	31 97       	sbiw	r30, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <LCD_write_command+0x58>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <LCD_write_command+0x5e>
 6be:	00 00       	nop
 6c0:	98 b3       	in	r25, 0x18	; 24
 6c2:	9b 7f       	andi	r25, 0xFB	; 251
 6c4:	98 bb       	out	0x18, r25	; 24
 6c6:	ef e9       	ldi	r30, 0x9F	; 159
 6c8:	ff e0       	ldi	r31, 0x0F	; 15
 6ca:	31 97       	sbiw	r30, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCD_write_command+0x6a>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCD_write_command+0x70>
 6d0:	00 00       	nop
 6d2:	83 ff       	sbrs	r24, 3
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <LCD_write_command+0x7e>
 6d6:	98 b3       	in	r25, 0x18	; 24
 6d8:	90 68       	ori	r25, 0x80	; 128
 6da:	98 bb       	out	0x18, r25	; 24
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <LCD_write_command+0x84>
 6de:	98 b3       	in	r25, 0x18	; 24
 6e0:	9f 77       	andi	r25, 0x7F	; 127
 6e2:	98 bb       	out	0x18, r25	; 24
 6e4:	82 ff       	sbrs	r24, 2
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <LCD_write_command+0x90>
 6e8:	98 b3       	in	r25, 0x18	; 24
 6ea:	90 64       	ori	r25, 0x40	; 64
 6ec:	98 bb       	out	0x18, r25	; 24
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <LCD_write_command+0x96>
 6f0:	98 b3       	in	r25, 0x18	; 24
 6f2:	9f 7b       	andi	r25, 0xBF	; 191
 6f4:	98 bb       	out	0x18, r25	; 24
 6f6:	81 ff       	sbrs	r24, 1
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <LCD_write_command+0xa2>
 6fa:	98 b3       	in	r25, 0x18	; 24
 6fc:	90 62       	ori	r25, 0x20	; 32
 6fe:	98 bb       	out	0x18, r25	; 24
 700:	03 c0       	rjmp	.+6      	; 0x708 <LCD_write_command+0xa8>
 702:	98 b3       	in	r25, 0x18	; 24
 704:	9f 7d       	andi	r25, 0xDF	; 223
 706:	98 bb       	out	0x18, r25	; 24
 708:	80 ff       	sbrs	r24, 0
 70a:	04 c0       	rjmp	.+8      	; 0x714 <LCD_write_command+0xb4>
 70c:	88 b3       	in	r24, 0x18	; 24
 70e:	80 61       	ori	r24, 0x10	; 16
 710:	88 bb       	out	0x18, r24	; 24
 712:	03 c0       	rjmp	.+6      	; 0x71a <LCD_write_command+0xba>
 714:	88 b3       	in	r24, 0x18	; 24
 716:	8f 7e       	andi	r24, 0xEF	; 239
 718:	88 bb       	out	0x18, r24	; 24
 71a:	88 b3       	in	r24, 0x18	; 24
 71c:	84 60       	ori	r24, 0x04	; 4
 71e:	88 bb       	out	0x18, r24	; 24
 720:	8f e9       	ldi	r24, 0x9F	; 159
 722:	9f e0       	ldi	r25, 0x0F	; 15
 724:	01 97       	sbiw	r24, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <LCD_write_command+0xc4>
 728:	00 c0       	rjmp	.+0      	; 0x72a <LCD_write_command+0xca>
 72a:	00 00       	nop
 72c:	88 b3       	in	r24, 0x18	; 24
 72e:	8b 7f       	andi	r24, 0xFB	; 251
 730:	88 bb       	out	0x18, r24	; 24
 732:	ef e9       	ldi	r30, 0x9F	; 159
 734:	ff e0       	ldi	r31, 0x0F	; 15
 736:	31 97       	sbiw	r30, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <LCD_write_command+0xd6>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <LCD_write_command+0xdc>
 73c:	00 00       	nop
 73e:	08 95       	ret

00000740 <LCD_init>:
 740:	87 b3       	in	r24, 0x17	; 23
 742:	8c 6f       	ori	r24, 0xFC	; 252
 744:	87 bb       	out	0x17, r24	; 23
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 74c:	8f e7       	ldi	r24, 0x7F	; 127
 74e:	9e e3       	ldi	r25, 0x3E	; 62
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <LCD_init+0x10>
 754:	00 c0       	rjmp	.+0      	; 0x756 <LCD_init+0x16>
 756:	00 00       	nop
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 75e:	8f e7       	ldi	r24, 0x7F	; 127
 760:	9e e3       	ldi	r25, 0x3E	; 62
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <LCD_init+0x22>
 766:	00 c0       	rjmp	.+0      	; 0x768 <LCD_init+0x28>
 768:	00 00       	nop
 76a:	83 e0       	ldi	r24, 0x03	; 3
 76c:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 770:	8f e7       	ldi	r24, 0x7F	; 127
 772:	9e e3       	ldi	r25, 0x3E	; 62
 774:	01 97       	sbiw	r24, 0x01	; 1
 776:	f1 f7       	brne	.-4      	; 0x774 <LCD_init+0x34>
 778:	00 c0       	rjmp	.+0      	; 0x77a <LCD_init+0x3a>
 77a:	00 00       	nop
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 782:	88 e2       	ldi	r24, 0x28	; 40
 784:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 788:	88 e0       	ldi	r24, 0x08	; 8
 78a:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 794:	86 e0       	ldi	r24, 0x06	; 6
 796:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 79a:	8c e0       	ldi	r24, 0x0C	; 12
 79c:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_command>
 7a0:	9f ef       	ldi	r25, 0xFF	; 255
 7a2:	29 ef       	ldi	r18, 0xF9	; 249
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	91 50       	subi	r25, 0x01	; 1
 7a8:	20 40       	sbci	r18, 0x00	; 0
 7aa:	80 40       	sbci	r24, 0x00	; 0
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <LCD_init+0x66>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <LCD_init+0x70>
 7b0:	00 00       	nop
 7b2:	08 95       	ret

000007b4 <LCD_write_data>:
 7b4:	98 b3       	in	r25, 0x18	; 24
 7b6:	98 60       	ori	r25, 0x08	; 8
 7b8:	98 bb       	out	0x18, r25	; 24
 7ba:	88 23       	and	r24, r24
 7bc:	24 f4       	brge	.+8      	; 0x7c6 <LCD_write_data+0x12>
 7be:	98 b3       	in	r25, 0x18	; 24
 7c0:	90 68       	ori	r25, 0x80	; 128
 7c2:	98 bb       	out	0x18, r25	; 24
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <LCD_write_data+0x18>
 7c6:	98 b3       	in	r25, 0x18	; 24
 7c8:	9f 77       	andi	r25, 0x7F	; 127
 7ca:	98 bb       	out	0x18, r25	; 24
 7cc:	86 ff       	sbrs	r24, 6
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <LCD_write_data+0x24>
 7d0:	98 b3       	in	r25, 0x18	; 24
 7d2:	90 64       	ori	r25, 0x40	; 64
 7d4:	98 bb       	out	0x18, r25	; 24
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <LCD_write_data+0x2a>
 7d8:	98 b3       	in	r25, 0x18	; 24
 7da:	9f 7b       	andi	r25, 0xBF	; 191
 7dc:	98 bb       	out	0x18, r25	; 24
 7de:	85 ff       	sbrs	r24, 5
 7e0:	04 c0       	rjmp	.+8      	; 0x7ea <LCD_write_data+0x36>
 7e2:	98 b3       	in	r25, 0x18	; 24
 7e4:	90 62       	ori	r25, 0x20	; 32
 7e6:	98 bb       	out	0x18, r25	; 24
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <LCD_write_data+0x3c>
 7ea:	98 b3       	in	r25, 0x18	; 24
 7ec:	9f 7d       	andi	r25, 0xDF	; 223
 7ee:	98 bb       	out	0x18, r25	; 24
 7f0:	84 ff       	sbrs	r24, 4
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <LCD_write_data+0x48>
 7f4:	98 b3       	in	r25, 0x18	; 24
 7f6:	90 61       	ori	r25, 0x10	; 16
 7f8:	98 bb       	out	0x18, r25	; 24
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fc:	98 b3       	in	r25, 0x18	; 24
 7fe:	9f 7e       	andi	r25, 0xEF	; 239
 800:	98 bb       	out	0x18, r25	; 24
 802:	98 b3       	in	r25, 0x18	; 24
 804:	94 60       	ori	r25, 0x04	; 4
 806:	98 bb       	out	0x18, r25	; 24
 808:	ef e9       	ldi	r30, 0x9F	; 159
 80a:	ff e0       	ldi	r31, 0x0F	; 15
 80c:	31 97       	sbiw	r30, 0x01	; 1
 80e:	f1 f7       	brne	.-4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 810:	00 c0       	rjmp	.+0      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 812:	00 00       	nop
 814:	98 b3       	in	r25, 0x18	; 24
 816:	9b 7f       	andi	r25, 0xFB	; 251
 818:	98 bb       	out	0x18, r25	; 24
 81a:	ef e9       	ldi	r30, 0x9F	; 159
 81c:	ff e0       	ldi	r31, 0x0F	; 15
 81e:	31 97       	sbiw	r30, 0x01	; 1
 820:	f1 f7       	brne	.-4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 822:	00 c0       	rjmp	.+0      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 824:	00 00       	nop
 826:	83 ff       	sbrs	r24, 3
 828:	04 c0       	rjmp	.+8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82a:	98 b3       	in	r25, 0x18	; 24
 82c:	90 68       	ori	r25, 0x80	; 128
 82e:	98 bb       	out	0x18, r25	; 24
 830:	03 c0       	rjmp	.+6      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 832:	98 b3       	in	r25, 0x18	; 24
 834:	9f 77       	andi	r25, 0x7F	; 127
 836:	98 bb       	out	0x18, r25	; 24
 838:	82 ff       	sbrs	r24, 2
 83a:	04 c0       	rjmp	.+8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83c:	98 b3       	in	r25, 0x18	; 24
 83e:	90 64       	ori	r25, 0x40	; 64
 840:	98 bb       	out	0x18, r25	; 24
 842:	03 c0       	rjmp	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 844:	98 b3       	in	r25, 0x18	; 24
 846:	9f 7b       	andi	r25, 0xBF	; 191
 848:	98 bb       	out	0x18, r25	; 24
 84a:	81 ff       	sbrs	r24, 1
 84c:	04 c0       	rjmp	.+8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84e:	98 b3       	in	r25, 0x18	; 24
 850:	90 62       	ori	r25, 0x20	; 32
 852:	98 bb       	out	0x18, r25	; 24
 854:	03 c0       	rjmp	.+6      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 856:	98 b3       	in	r25, 0x18	; 24
 858:	9f 7d       	andi	r25, 0xDF	; 223
 85a:	98 bb       	out	0x18, r25	; 24
 85c:	80 ff       	sbrs	r24, 0
 85e:	04 c0       	rjmp	.+8      	; 0x868 <__stack+0x9>
 860:	88 b3       	in	r24, 0x18	; 24
 862:	80 61       	ori	r24, 0x10	; 16
 864:	88 bb       	out	0x18, r24	; 24
 866:	03 c0       	rjmp	.+6      	; 0x86e <__stack+0xf>
 868:	88 b3       	in	r24, 0x18	; 24
 86a:	8f 7e       	andi	r24, 0xEF	; 239
 86c:	88 bb       	out	0x18, r24	; 24
 86e:	88 b3       	in	r24, 0x18	; 24
 870:	84 60       	ori	r24, 0x04	; 4
 872:	88 bb       	out	0x18, r24	; 24
 874:	8f e9       	ldi	r24, 0x9F	; 159
 876:	9f e0       	ldi	r25, 0x0F	; 15
 878:	01 97       	sbiw	r24, 0x01	; 1
 87a:	f1 f7       	brne	.-4      	; 0x878 <__stack+0x19>
 87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
 87e:	00 00       	nop
 880:	88 b3       	in	r24, 0x18	; 24
 882:	8b 7f       	andi	r24, 0xFB	; 251
 884:	88 bb       	out	0x18, r24	; 24
 886:	ef e9       	ldi	r30, 0x9F	; 159
 888:	ff e0       	ldi	r31, 0x0F	; 15
 88a:	31 97       	sbiw	r30, 0x01	; 1
 88c:	f1 f7       	brne	.-4      	; 0x88a <__stack+0x2b>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
 890:	00 00       	nop
 892:	08 95       	ret

00000894 <LCD_write_num>:
* Function Name: LCD_write_num
* Purpose      : write a number on lCD
* Parameters   : num: number to be written
* Return value : void
*****************************************************************************/
void LCD_write_num(uint32_t num){
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	2a 97       	sbiw	r28, 0x0a	; 10
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) {
 8aa:	61 15       	cp	r22, r1
 8ac:	71 05       	cpc	r23, r1
 8ae:	81 05       	cpc	r24, r1
 8b0:	91 05       	cpc	r25, r1
 8b2:	d1 f4       	brne	.+52     	; 0x8e8 <LCD_write_num+0x54>
		LCD_write_data('0');
 8b4:	80 e3       	ldi	r24, 0x30	; 48
 8b6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_write_data>
 8ba:	2c c0       	rjmp	.+88     	; 0x914 <LCD_write_num+0x80>
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
 8bc:	2a e0       	ldi	r18, 0x0A	; 10
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	40 e0       	ldi	r20, 0x00	; 0
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	0e 94 83 05 	call	0xb06	; 0xb06 <__udivmodsi4>
 8c8:	e1 e0       	ldi	r30, 0x01	; 1
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	ec 0f       	add	r30, r28
 8ce:	fd 1f       	adc	r31, r29
 8d0:	e1 0f       	add	r30, r17
 8d2:	f1 1d       	adc	r31, r1
 8d4:	17 fd       	sbrc	r17, 7
 8d6:	fa 95       	dec	r31
 8d8:	60 5d       	subi	r22, 0xD0	; 208
 8da:	60 83       	st	Z, r22
		num /= 10;
 8dc:	62 2f       	mov	r22, r18
 8de:	73 2f       	mov	r23, r19
 8e0:	84 2f       	mov	r24, r20
 8e2:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_data('0');
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
 8e4:	1f 5f       	subi	r17, 0xFF	; 255
 8e6:	01 c0       	rjmp	.+2      	; 0x8ea <LCD_write_num+0x56>
 8e8:	10 e0       	ldi	r17, 0x00	; 0
 8ea:	61 15       	cp	r22, r1
 8ec:	71 05       	cpc	r23, r1
 8ee:	81 05       	cpc	r24, r1
 8f0:	91 05       	cpc	r25, r1
 8f2:	21 f7       	brne	.-56     	; 0x8bc <LCD_write_num+0x28>
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
 8f4:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0){
 8f6:	0c c0       	rjmp	.+24     	; 0x910 <LCD_write_num+0x7c>
		LCD_write_data(num_arr[i]);
 8f8:	e1 e0       	ldi	r30, 0x01	; 1
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	ec 0f       	add	r30, r28
 8fe:	fd 1f       	adc	r31, r29
 900:	e1 0f       	add	r30, r17
 902:	f1 1d       	adc	r31, r1
 904:	17 fd       	sbrc	r17, 7
 906:	fa 95       	dec	r31
 908:	80 81       	ld	r24, Z
 90a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_write_data>
		i--;
 90e:	11 50       	subi	r17, 0x01	; 1
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
	while (i >= 0){
 910:	11 23       	and	r17, r17
 912:	94 f7       	brge	.-28     	; 0x8f8 <LCD_write_num+0x64>
		LCD_write_data(num_arr[i]);
		i--;
	}
 914:	2a 96       	adiw	r28, 0x0a	; 10
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	08 95       	ret

00000928 <ULTRA_SONIC_init>:
* Parameters   : void
* Return value : void
*****************************************************************************/
void ULTRA_SONIC_init(void){
	
	TCCR1A = 0;
 928:	1f bc       	out	0x2f, r1	; 47
	SETBIT(TCCR1B,CS10);
 92a:	8e b5       	in	r24, 0x2e	; 46
 92c:	81 60       	ori	r24, 0x01	; 1
 92e:	8e bd       	out	0x2e, r24	; 46
	SETBIT(TCCR1B,CS11);   //prescaler
 930:	8e b5       	in	r24, 0x2e	; 46
 932:	82 60       	ori	r24, 0x02	; 2
 934:	8e bd       	out	0x2e, r24	; 46
	SETBIT(TCCR1B,ICES1);   // rising edge select
 936:	8e b5       	in	r24, 0x2e	; 46
 938:	80 64       	ori	r24, 0x40	; 64
 93a:	8e bd       	out	0x2e, r24	; 46
	SETBIT(TCCR1B,ICNC1);   // noise canclation
 93c:	8e b5       	in	r24, 0x2e	; 46
 93e:	80 68       	ori	r24, 0x80	; 128
 940:	8e bd       	out	0x2e, r24	; 46
	SETBIT(TIFR,ICF1);     // clean flag
 942:	88 b7       	in	r24, 0x38	; 56
 944:	80 62       	ori	r24, 0x20	; 32
 946:	88 bf       	out	0x38, r24	; 56
	SETBIT(DDRD,7);
 948:	81 b3       	in	r24, 0x11	; 17
 94a:	80 68       	ori	r24, 0x80	; 128
 94c:	81 bb       	out	0x11, r24	; 17
 94e:	08 95       	ret

00000950 <ULTRA_SONIC_distance>:



*/
uint8_t ULTRA_SONIC_distance(void){
	SETBIT(TCCR1B,ICES1);
 950:	8e b5       	in	r24, 0x2e	; 46
 952:	80 64       	ori	r24, 0x40	; 64
 954:	8e bd       	out	0x2e, r24	; 46
	SETBIT(TIFR,ICF1);
 956:	88 b7       	in	r24, 0x38	; 56
 958:	80 62       	ori	r24, 0x20	; 32
 95a:	88 bf       	out	0x38, r24	; 56
	short distance;
	SETBIT(PORTD,7);
 95c:	82 b3       	in	r24, 0x12	; 18
 95e:	80 68       	ori	r24, 0x80	; 128
 960:	82 bb       	out	0x12, r24	; 18
	SETBIT(PORTD,3);
 962:	82 b3       	in	r24, 0x12	; 18
 964:	88 60       	ori	r24, 0x08	; 8
 966:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 968:	87 ec       	ldi	r24, 0xC7	; 199
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	01 97       	sbiw	r24, 0x01	; 1
 96e:	f1 f7       	brne	.-4      	; 0x96c <ULTRA_SONIC_distance+0x1c>
 970:	00 c0       	rjmp	.+0      	; 0x972 <ULTRA_SONIC_distance+0x22>
 972:	00 00       	nop
	_delay_us(50);
	CLRBIT(PORTD,7);
 974:	82 b3       	in	r24, 0x12	; 18
 976:	8f 77       	andi	r24, 0x7F	; 127
 978:	82 bb       	out	0x12, r24	; 18
	CLRBIT(PORTD,3);
 97a:	82 b3       	in	r24, 0x12	; 18
 97c:	87 7f       	andi	r24, 0xF7	; 247
 97e:	82 bb       	out	0x12, r24	; 18
	while (READBIT(TIFR,ICF1) == 0);
 980:	08 b6       	in	r0, 0x38	; 56
 982:	05 fe       	sbrs	r0, 5
 984:	fd cf       	rjmp	.-6      	; 0x980 <ULTRA_SONIC_distance+0x30>
	
	time1 = ICR1;
 986:	86 b5       	in	r24, 0x26	; 38
 988:	97 b5       	in	r25, 0x27	; 39
 98a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <time1+0x1>
 98e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <time1>
	SETBIT(TIFR,ICF1);
 992:	88 b7       	in	r24, 0x38	; 56
 994:	80 62       	ori	r24, 0x20	; 32
 996:	88 bf       	out	0x38, r24	; 56
	CLRBIT(TCCR1B,ICES1);
 998:	8e b5       	in	r24, 0x2e	; 46
 99a:	8f 7b       	andi	r24, 0xBF	; 191
 99c:	8e bd       	out	0x2e, r24	; 46
	
	while (READBIT(TIFR,ICF1) == 0);
 99e:	08 b6       	in	r0, 0x38	; 56
 9a0:	05 fe       	sbrs	r0, 5
 9a2:	fd cf       	rjmp	.-6      	; 0x99e <ULTRA_SONIC_distance+0x4e>
	
	time2 = ICR1;
 9a4:	86 b5       	in	r24, 0x26	; 38
 9a6:	97 b5       	in	r25, 0x27	; 39
 9a8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <time2+0x1>
 9ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <time2>
	SETBIT(TIFR,ICF1);
 9b0:	88 b7       	in	r24, 0x38	; 56
 9b2:	80 62       	ori	r24, 0x20	; 32
 9b4:	88 bf       	out	0x38, r24	; 56
	
	TCNT1=0;
 9b6:	1d bc       	out	0x2d, r1	; 45
 9b8:	1c bc       	out	0x2c, r1	; 44
	
	
 distance =(((time2-time1) * 34600)*64 / F_CPU*2)/4;
 9ba:	a0 91 61 00 	lds	r26, 0x0061	; 0x800061 <time2>
 9be:	b0 91 62 00 	lds	r27, 0x0062	; 0x800062 <time2+0x1>
 9c2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <time1>
 9c6:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <time1+0x1>
 9ca:	a8 1b       	sub	r26, r24
 9cc:	b9 0b       	sbc	r27, r25
 9ce:	20 e0       	ldi	r18, 0x00	; 0
 9d0:	3a ec       	ldi	r19, 0xCA	; 202
 9d2:	41 e2       	ldi	r20, 0x21	; 33
 9d4:	50 e0       	ldi	r21, 0x00	; 0
 9d6:	0e 94 ab 05 	call	0xb56	; 0xb56 <__mulshisi3>
 9da:	20 e0       	ldi	r18, 0x00	; 0
 9dc:	34 e2       	ldi	r19, 0x24	; 36
 9de:	44 ef       	ldi	r20, 0xF4	; 244
 9e0:	50 e0       	ldi	r21, 0x00	; 0
 9e2:	0e 94 83 05 	call	0xb06	; 0xb06 <__udivmodsi4>
 9e6:	da 01       	movw	r26, r20
 9e8:	c9 01       	movw	r24, r18
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	aa 1f       	adc	r26, r26
 9f0:	bb 1f       	adc	r27, r27
 9f2:	b6 95       	lsr	r27
 9f4:	a7 95       	ror	r26
 9f6:	97 95       	ror	r25
 9f8:	87 95       	ror	r24
 9fa:	b6 95       	lsr	r27
 9fc:	a7 95       	ror	r26
 9fe:	97 95       	ror	r25
 a00:	87 95       	ror	r24
	
	return distance;
}
 a02:	08 95       	ret

00000a04 <INTERUPT_INPUT_CAPTURE_init>:
* Return value : void
*****************************************************************************/
void INTERUPT_INPUT_CAPTURE_init(void){
	
	
	SETBIT(SREG,7); //Enable global int0
 a04:	8f b7       	in	r24, 0x3f	; 63
 a06:	80 68       	ori	r24, 0x80	; 128
 a08:	8f bf       	out	0x3f, r24	; 63
	CLRBIT(DDRD,2);
 a0a:	81 b3       	in	r24, 0x11	; 17
 a0c:	8b 7f       	andi	r24, 0xFB	; 251
 a0e:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,3);
 a10:	81 b3       	in	r24, 0x11	; 17
 a12:	88 60       	ori	r24, 0x08	; 8
 a14:	81 bb       	out	0x11, r24	; 17
	SETBIT(MCUCR,0);
 a16:	85 b7       	in	r24, 0x35	; 53
 a18:	81 60       	ori	r24, 0x01	; 1
 a1a:	85 bf       	out	0x35, r24	; 53
	//	SETBIT(MCUSR,1);
	SETBIT(GICR,6);
 a1c:	8b b7       	in	r24, 0x3b	; 59
 a1e:	80 64       	ori	r24, 0x40	; 64
 a20:	8b bf       	out	0x3b, r24	; 59
 a22:	08 95       	ret

00000a24 <__vector_1>:
	
	
}


ISR(INT0_vect){
 a24:	1f 92       	push	r1
 a26:	0f 92       	push	r0
 a28:	0f b6       	in	r0, 0x3f	; 63
 a2a:	0f 92       	push	r0
 a2c:	11 24       	eor	r1, r1
 a2e:	2f 93       	push	r18
 a30:	3f 93       	push	r19
 a32:	4f 93       	push	r20
 a34:	5f 93       	push	r21
 a36:	6f 93       	push	r22
 a38:	7f 93       	push	r23
 a3a:	8f 93       	push	r24
 a3c:	9f 93       	push	r25
 a3e:	af 93       	push	r26
 a40:	bf 93       	push	r27
 a42:	ef 93       	push	r30
 a44:	ff 93       	push	r31
	
	Interrupt_isr();
 a46:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Interrupt_isr>
 a4a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Interrupt_isr+0x1>
 a4e:	09 95       	icall
	
}
 a50:	ff 91       	pop	r31
 a52:	ef 91       	pop	r30
 a54:	bf 91       	pop	r27
 a56:	af 91       	pop	r26
 a58:	9f 91       	pop	r25
 a5a:	8f 91       	pop	r24
 a5c:	7f 91       	pop	r23
 a5e:	6f 91       	pop	r22
 a60:	5f 91       	pop	r21
 a62:	4f 91       	pop	r20
 a64:	3f 91       	pop	r19
 a66:	2f 91       	pop	r18
 a68:	0f 90       	pop	r0
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	0f 90       	pop	r0
 a6e:	1f 90       	pop	r1
 a70:	18 95       	reti

00000a72 <TIMER0_normaMode_ON>:
* Purpose      : init timer in normal mode with no prescaler
* Parameters   : void
* Return value : void
*****************************************************************************/
void TIMER0_normaMode_ON(void){
	SETBIT(TCCR0,CS00); 
 a72:	83 b7       	in	r24, 0x33	; 51
 a74:	81 60       	ori	r24, 0x01	; 1
 a76:	83 bf       	out	0x33, r24	; 51
    SETBIT(TCCR0,CS01);//
 a78:	83 b7       	in	r24, 0x33	; 51
 a7a:	82 60       	ori	r24, 0x02	; 2
 a7c:	83 bf       	out	0x33, r24	; 51
	SETBIT(TIMSK,TOIE0); // enable timer ov interrupt
 a7e:	89 b7       	in	r24, 0x39	; 57
 a80:	81 60       	ori	r24, 0x01	; 1
 a82:	89 bf       	out	0x39, r24	; 57
	TCNT0=0;
 a84:	12 be       	out	0x32, r1	; 50
 a86:	08 95       	ret

00000a88 <TIMER0_normaMode_OFF>:

}


void TIMER0_normaMode_OFF(void){
	CLRBIT(TCCR0,CS00);
 a88:	83 b7       	in	r24, 0x33	; 51
 a8a:	8e 7f       	andi	r24, 0xFE	; 254
 a8c:	83 bf       	out	0x33, r24	; 51
	CLRBIT(TCCR0,CS01);//
 a8e:	83 b7       	in	r24, 0x33	; 51
 a90:	8d 7f       	andi	r24, 0xFD	; 253
 a92:	83 bf       	out	0x33, r24	; 51
	CLRBIT(TIMSK,TOIE0); // enable timer ov interrupt
 a94:	89 b7       	in	r24, 0x39	; 57
 a96:	8e 7f       	andi	r24, 0xFE	; 254
 a98:	89 bf       	out	0x39, r24	; 57
	TCNT0=0;
 a9a:	12 be       	out	0x32, r1	; 50
 a9c:	08 95       	ret

00000a9e <__vector_11>:

	

}

ISR(TIMER0_OVF_vect){
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
 aa8:	2f 93       	push	r18
 aaa:	3f 93       	push	r19
 aac:	4f 93       	push	r20
 aae:	5f 93       	push	r21
 ab0:	6f 93       	push	r22
 ab2:	7f 93       	push	r23
 ab4:	8f 93       	push	r24
 ab6:	9f 93       	push	r25
 ab8:	af 93       	push	r26
 aba:	bf 93       	push	r27
 abc:	ef 93       	push	r30
 abe:	ff 93       	push	r31
	timer0_ovf_isr();
 ac0:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <timer0_ovf_isr>
 ac4:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <timer0_ovf_isr+0x1>
 ac8:	09 95       	icall
 aca:	ff 91       	pop	r31
 acc:	ef 91       	pop	r30
 ace:	bf 91       	pop	r27
 ad0:	af 91       	pop	r26
 ad2:	9f 91       	pop	r25
 ad4:	8f 91       	pop	r24
 ad6:	7f 91       	pop	r23
 ad8:	6f 91       	pop	r22
 ada:	5f 91       	pop	r21
 adc:	4f 91       	pop	r20
 ade:	3f 91       	pop	r19
 ae0:	2f 91       	pop	r18
 ae2:	0f 90       	pop	r0
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	0f 90       	pop	r0
 ae8:	1f 90       	pop	r1
 aea:	18 95       	reti

00000aec <UART_init>:
* Parameters   : void
* Return value : void
*****************************************************************************/
void UART_init(void)
{
	UBRRL = 103;
 aec:	87 e6       	ldi	r24, 0x67	; 103
 aee:	89 b9       	out	0x09, r24	; 9
	SETBIT(UCSRB,RXEN);
 af0:	8a b1       	in	r24, 0x0a	; 10
 af2:	80 61       	ori	r24, 0x10	; 16
 af4:	8a b9       	out	0x0a, r24	; 10
	SETBIT(UCSRB,TXEN);
 af6:	8a b1       	in	r24, 0x0a	; 10
 af8:	88 60       	ori	r24, 0x08	; 8
 afa:	8a b9       	out	0x0a, r24	; 10
 afc:	08 95       	ret

00000afe <UART_Transmit>:
* Parameters   : Data will Transmit
* Return value : void
*****************************************************************************/
void UART_Transmit(uint8_t data)
{
	UDR =data;
 afe:	8c b9       	out	0x0c, r24	; 12
	while(READBIT(UCSRA,TXC)==0);
 b00:	5e 9b       	sbis	0x0b, 6	; 11
 b02:	fe cf       	rjmp	.-4      	; 0xb00 <UART_Transmit+0x2>
	
}
 b04:	08 95       	ret

00000b06 <__udivmodsi4>:
 b06:	a1 e2       	ldi	r26, 0x21	; 33
 b08:	1a 2e       	mov	r1, r26
 b0a:	aa 1b       	sub	r26, r26
 b0c:	bb 1b       	sub	r27, r27
 b0e:	fd 01       	movw	r30, r26
 b10:	0d c0       	rjmp	.+26     	; 0xb2c <__udivmodsi4_ep>

00000b12 <__udivmodsi4_loop>:
 b12:	aa 1f       	adc	r26, r26
 b14:	bb 1f       	adc	r27, r27
 b16:	ee 1f       	adc	r30, r30
 b18:	ff 1f       	adc	r31, r31
 b1a:	a2 17       	cp	r26, r18
 b1c:	b3 07       	cpc	r27, r19
 b1e:	e4 07       	cpc	r30, r20
 b20:	f5 07       	cpc	r31, r21
 b22:	20 f0       	brcs	.+8      	; 0xb2c <__udivmodsi4_ep>
 b24:	a2 1b       	sub	r26, r18
 b26:	b3 0b       	sbc	r27, r19
 b28:	e4 0b       	sbc	r30, r20
 b2a:	f5 0b       	sbc	r31, r21

00000b2c <__udivmodsi4_ep>:
 b2c:	66 1f       	adc	r22, r22
 b2e:	77 1f       	adc	r23, r23
 b30:	88 1f       	adc	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	1a 94       	dec	r1
 b36:	69 f7       	brne	.-38     	; 0xb12 <__udivmodsi4_loop>
 b38:	60 95       	com	r22
 b3a:	70 95       	com	r23
 b3c:	80 95       	com	r24
 b3e:	90 95       	com	r25
 b40:	9b 01       	movw	r18, r22
 b42:	ac 01       	movw	r20, r24
 b44:	bd 01       	movw	r22, r26
 b46:	cf 01       	movw	r24, r30
 b48:	08 95       	ret

00000b4a <__tablejump2__>:
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	05 90       	lpm	r0, Z+
 b50:	f4 91       	lpm	r31, Z
 b52:	e0 2d       	mov	r30, r0
 b54:	09 94       	ijmp

00000b56 <__mulshisi3>:
 b56:	b7 ff       	sbrs	r27, 7
 b58:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__muluhisi3>

00000b5c <__mulohisi3>:
 b5c:	0e 94 b3 05 	call	0xb66	; 0xb66 <__muluhisi3>
 b60:	82 1b       	sub	r24, r18
 b62:	93 0b       	sbc	r25, r19
 b64:	08 95       	ret

00000b66 <__muluhisi3>:
 b66:	0e 94 be 05 	call	0xb7c	; 0xb7c <__umulhisi3>
 b6a:	a5 9f       	mul	r26, r21
 b6c:	90 0d       	add	r25, r0
 b6e:	b4 9f       	mul	r27, r20
 b70:	90 0d       	add	r25, r0
 b72:	a4 9f       	mul	r26, r20
 b74:	80 0d       	add	r24, r0
 b76:	91 1d       	adc	r25, r1
 b78:	11 24       	eor	r1, r1
 b7a:	08 95       	ret

00000b7c <__umulhisi3>:
 b7c:	a2 9f       	mul	r26, r18
 b7e:	b0 01       	movw	r22, r0
 b80:	b3 9f       	mul	r27, r19
 b82:	c0 01       	movw	r24, r0
 b84:	a3 9f       	mul	r26, r19
 b86:	70 0d       	add	r23, r0
 b88:	81 1d       	adc	r24, r1
 b8a:	11 24       	eor	r1, r1
 b8c:	91 1d       	adc	r25, r1
 b8e:	b2 9f       	mul	r27, r18
 b90:	70 0d       	add	r23, r0
 b92:	81 1d       	adc	r24, r1
 b94:	11 24       	eor	r1, r1
 b96:	91 1d       	adc	r25, r1
 b98:	08 95       	ret

00000b9a <_exit>:
 b9a:	f8 94       	cli

00000b9c <__stop_program>:
 b9c:	ff cf       	rjmp	.-2      	; 0xb9c <__stop_program>
