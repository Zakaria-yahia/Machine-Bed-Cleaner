
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000cda  00000d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800070  00800070  00000d7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ba3  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afa  00000000  00000000  00002b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128b  00000000  00000000  00003621  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  000048ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fa  00000000  00000000  00004d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001513  00000000  00000000  00005332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_1>
   8:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_4>
  14:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_10>
  2c:	0c 94 6d 05 	jmp	0xada	; 0xada <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 01 	call	0x282	; 0x282 <main>
  8a:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INT0_isr>:
	}
	
	
}
static void INT0_isr(void){
	if (go_fwd==0 && go_rev==0)
  92:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <go_fwd>
  96:	81 11       	cpse	r24, r1
  98:	07 c0       	rjmp	.+14     	; 0xa8 <INT0_isr+0x16>
  9a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <go_rev>
  9e:	81 11       	cpse	r24, r1
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <INT0_isr+0x16>
	{
		go_fwd=1;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <go_fwd>
  a8:	08 95       	ret

000000aa <INT1_isr>:
	}
	
}

static void INT1_isr(void){
	if (go_rev==0 && go_fwd ==0)
  aa:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <go_rev>
  ae:	81 11       	cpse	r24, r1
  b0:	07 c0       	rjmp	.+14     	; 0xc0 <INT1_isr+0x16>
  b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <go_fwd>
  b6:	81 11       	cpse	r24, r1
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <INT1_isr+0x16>
	{
		go_rev=1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <go_rev>
  c0:	08 95       	ret

000000c2 <UART_RX_isr>:
	
}

static void UART_RX_isr(void){
	static uint8_t count=0;
	count++;
  c2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	data = UDR;
  cc:	9c b1       	in	r25, 0x0c	; 12
  ce:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <data>
	if (count==1)
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	19 f4       	brne	.+6      	; 0xdc <UART_RX_isr+0x1a>
	{
		distance_x=data;
  d6:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <distance_x>
  da:	08 95       	ret
	}else if (count==2)
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	21 f4       	brne	.+8      	; 0xe8 <UART_RX_isr+0x26>
	{
		distance_y=data;
  e0:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <distance_y>
		count=0;
  e4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
  e8:	08 95       	ret

000000ea <Y_Motor_isr>:


static void Y_Motor_isr(void){
	
	static uint8_t count=0;
	count++;
  ea:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <count.1807>
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <count.1807>
	if (go_fwd==1 && go_rev==0)
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <go_fwd>
  f8:	91 30       	cpi	r25, 0x01	; 1
  fa:	59 f5       	brne	.+86     	; 0x152 <Y_Motor_isr+0x68>
  fc:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <go_rev>
 100:	91 11       	cpse	r25, r1
 102:	27 c0       	rjmp	.+78     	; 0x152 <Y_Motor_isr+0x68>
	{
		if (count<=steps_y)
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <steps_y>
 10a:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <steps_y+0x1>
 10e:	28 17       	cp	r18, r24
 110:	39 07       	cpc	r19, r25
 112:	28 f0       	brcs	.+10     	; 0x11e <Y_Motor_isr+0x34>
		{
			Stepper_Run(FWD,y);
 114:	69 e7       	ldi	r22, 0x79	; 121
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Stepper_Run>
 11c:	07 c0       	rjmp	.+14     	; 0x12c <Y_Motor_isr+0x42>
			}else{
			count=0;
 11e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <count.1807>
			flag_fwd=0;
 122:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <flag_fwd>
			CLRBIT(TIMSK,TOIE2);
 126:	89 b7       	in	r24, 0x39	; 57
 128:	8f 7b       	andi	r24, 0xBF	; 191
 12a:	89 bf       	out	0x39, r24	; 57
		}
		if (count>=steps_y)
 12c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <count.1807>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <steps_y>
 136:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <steps_y+0x1>
 13a:	82 17       	cp	r24, r18
 13c:	93 07       	cpc	r25, r19
 13e:	48 f0       	brcs	.+18     	; 0x152 <Y_Motor_isr+0x68>
		{
			go_fwd=0;
 140:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <go_fwd>
			flag_fwd=0;
 144:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <flag_fwd>
			count=0;
 148:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <count.1807>
			CLRBIT(TIMSK,TOIE2);
 14c:	89 b7       	in	r24, 0x39	; 57
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	89 bf       	out	0x39, r24	; 57
		}
		
	}
	
	
	if (go_rev==1 && go_fwd==0)
 152:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <go_rev>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	69 f5       	brne	.+90     	; 0x1b4 <Y_Motor_isr+0xca>
 15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <go_fwd>
 15e:	81 11       	cpse	r24, r1
 160:	29 c0       	rjmp	.+82     	; 0x1b4 <Y_Motor_isr+0xca>
	{
		if (count<=steps_y)
 162:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <count.1807>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <steps_y>
 16c:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <steps_y+0x1>
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	28 f0       	brcs	.+10     	; 0x180 <Y_Motor_isr+0x96>
		{
			Stepper_Run(REV,y);
 176:	69 e7       	ldi	r22, 0x79	; 121
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Stepper_Run>
 17e:	07 c0       	rjmp	.+14     	; 0x18e <Y_Motor_isr+0xa4>
			}else{
			count=0;
 180:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <count.1807>
			flag_rev=0;
 184:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <flag_rev>
			CLRBIT(TIMSK,TOIE2);
 188:	89 b7       	in	r24, 0x39	; 57
 18a:	8f 7b       	andi	r24, 0xBF	; 191
 18c:	89 bf       	out	0x39, r24	; 57
		}
		if (count>=steps_y)
 18e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <count.1807>
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <steps_y>
 198:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <steps_y+0x1>
 19c:	82 17       	cp	r24, r18
 19e:	93 07       	cpc	r25, r19
 1a0:	48 f0       	brcs	.+18     	; 0x1b4 <Y_Motor_isr+0xca>
		{
			go_rev=0;
 1a2:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <go_rev>
			flag_rev=0;
 1a6:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <flag_rev>
			count=0;
 1aa:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <count.1807>
			CLRBIT(TIMSK,TOIE2);
 1ae:	89 b7       	in	r24, 0x39	; 57
 1b0:	8f 7b       	andi	r24, 0xBF	; 191
 1b2:	89 bf       	out	0x39, r24	; 57
 1b4:	08 95       	ret

000001b6 <X_Motor_isr>:
	
	
	
	
	static uint8_t count=0;
	count++;
 1b6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <count.1803>
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <count.1803>
	if (go_fwd==1 && go_rev==0)
 1c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <go_fwd>
 1c4:	91 30       	cpi	r25, 0x01	; 1
 1c6:	59 f5       	brne	.+86     	; 0x21e <X_Motor_isr+0x68>
 1c8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <go_rev>
 1cc:	91 11       	cpse	r25, r1
 1ce:	27 c0       	rjmp	.+78     	; 0x21e <X_Motor_isr+0x68>
	{
		if (count<=steps_x)
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <steps_x>
 1d6:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <steps_x+0x1>
 1da:	28 17       	cp	r18, r24
 1dc:	39 07       	cpc	r19, r25
 1de:	28 f0       	brcs	.+10     	; 0x1ea <X_Motor_isr+0x34>
		{
			Stepper_Run(FWD,x);
 1e0:	68 e7       	ldi	r22, 0x78	; 120
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Stepper_Run>
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <X_Motor_isr+0x42>
			}else{
			count=0;
 1ea:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count.1803>
			flag_fwd=0;
 1ee:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <flag_fwd>
			CLRBIT(TIMSK,TOIE0);
 1f2:	89 b7       	in	r24, 0x39	; 57
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	89 bf       	out	0x39, r24	; 57
			
		}
		if (count>=steps_x)
 1f8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <count.1803>
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <steps_x>
 202:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <steps_x+0x1>
 206:	82 17       	cp	r24, r18
 208:	93 07       	cpc	r25, r19
 20a:	48 f0       	brcs	.+18     	; 0x21e <X_Motor_isr+0x68>
		{
			go_fwd=0;
 20c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <go_fwd>
			flag_fwd=0;
 210:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <flag_fwd>
			count=0;
 214:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count.1803>
			CLRBIT(TIMSK,TOIE0);
 218:	89 b7       	in	r24, 0x39	; 57
 21a:	8e 7f       	andi	r24, 0xFE	; 254
 21c:	89 bf       	out	0x39, r24	; 57
		}
	}
	 
	if (go_rev==1 && go_fwd==0)
 21e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <go_rev>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	69 f5       	brne	.+90     	; 0x280 <X_Motor_isr+0xca>
 226:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <go_fwd>
 22a:	81 11       	cpse	r24, r1
 22c:	29 c0       	rjmp	.+82     	; 0x280 <X_Motor_isr+0xca>
	{
		if (count<=steps_x)
 22e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <count.1803>
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <steps_x>
 238:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <steps_x+0x1>
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	28 f0       	brcs	.+10     	; 0x24c <X_Motor_isr+0x96>
		{
			Stepper_Run(REV,x);
 242:	68 e7       	ldi	r22, 0x78	; 120
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Stepper_Run>
 24a:	07 c0       	rjmp	.+14     	; 0x25a <X_Motor_isr+0xa4>
			}else{
			count=0;
 24c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count.1803>
			flag_rev=0;
 250:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <flag_rev>
			CLRBIT(TIMSK,TOIE0);
 254:	89 b7       	in	r24, 0x39	; 57
 256:	8e 7f       	andi	r24, 0xFE	; 254
 258:	89 bf       	out	0x39, r24	; 57
			
		}
		if (count>=steps_x)
 25a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <count.1803>
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <steps_x>
 264:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <steps_x+0x1>
 268:	82 17       	cp	r24, r18
 26a:	93 07       	cpc	r25, r19
 26c:	48 f0       	brcs	.+18     	; 0x280 <X_Motor_isr+0xca>
		{
			go_rev=0;
 26e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <go_rev>
			flag_rev=0;
 272:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <flag_rev>
			count=0;
 276:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count.1803>
			CLRBIT(TIMSK,TOIE0);
 27a:	89 b7       	in	r24, 0x39	; 57
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	89 bf       	out	0x39, r24	; 57
 280:	08 95       	ret

00000282 <main>:
#define y 'y'
#define FWD 0
#define REV 1
int main(void)
{
	 LCD_init();
 282:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_init>
   UART_isr = UART_RX_isr;
 286:	81 e6       	ldi	r24, 0x61	; 97
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <UART_isr+0x1>
 28e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <UART_isr>
   timer0_ovf_isr=X_Motor_isr;
 292:	8b ed       	ldi	r24, 0xDB	; 219
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <timer0_ovf_isr+0x1>
 29a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <timer0_ovf_isr>
   timer1_ovf_isr=Y_Motor_isr;
 29e:	85 e7       	ldi	r24, 0x75	; 117
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <timer1_ovf_isr+0x1>
 2a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <timer1_ovf_isr>
   EXTERNAL_ENTERRUPT0_isr=INT0_isr;
 2aa:	89 e4       	ldi	r24, 0x49	; 73
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <EXTERNAL_ENTERRUPT0_isr+0x1>
 2b2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <EXTERNAL_ENTERRUPT0_isr>
   EXTERNAL_ENTERRUPT1_isr=INT1_isr;
 2b6:	85 e5       	ldi	r24, 0x55	; 85
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <EXTERNAL_ENTERRUPT1_isr+0x1>
 2be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <EXTERNAL_ENTERRUPT1_isr>
   EXTERNAL_ENTERRUPT_init();
 2c2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <EXTERNAL_ENTERRUPT_init>
   TIMER0_normaMode_init();
 2c6:	0e 94 66 05 	call	0xacc	; 0xacc <TIMER0_normaMode_init>
   TIMER1_normaMode_init();
 2ca:	0e 94 bb 05 	call	0xb76	; 0xb76 <TIMER1_normaMode_init>
	Stepper_init();
 2ce:	0e 94 78 03 	call	0x6f0	; 0x6f0 <Stepper_init>
   UART_init();
 2d2:	0e 94 13 06 	call	0xc26	; 0xc26 <UART_init>
   
 
    while (1) 
    {
		
		LCD_write_command(0x80);
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
		LCD_write_string("X=");
 2dc:	80 e6       	ldi	r24, 0x60	; 96
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_write_string>
		LCD_write_num(distance_x);
 2e4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <distance_x>
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 2e 03 	call	0x65c	; 0x65c <LCD_write_num>
		LCD_write_string("mm");
 2f2:	83 e6       	ldi	r24, 0x63	; 99
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_write_string>
		LCD_write_string(" Y =");
 2fa:	86 e6       	ldi	r24, 0x66	; 102
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_write_string>
		LCD_write_num(distance_y);
 302:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <distance_y>
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 2e 03 	call	0x65c	; 0x65c <LCD_write_num>
		LCD_write_string("mm");
 310:	83 e6       	ldi	r24, 0x63	; 99
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_write_string>
		steps_x = (distance_x*10)/4;
 318:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <distance_x>
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	9c 01       	movw	r18, r24
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	82 0f       	add	r24, r18
 332:	93 1f       	adc	r25, r19
 334:	9c 01       	movw	r18, r24
 336:	99 23       	and	r25, r25
 338:	14 f4       	brge	.+4      	; 0x33e <main+0xbc>
 33a:	2d 5f       	subi	r18, 0xFD	; 253
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	35 95       	asr	r19
 340:	27 95       	ror	r18
 342:	35 95       	asr	r19
 344:	27 95       	ror	r18
 346:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <steps_x+0x1>
 34a:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <steps_x>
		steps_y = (distance_y*10)/4;
 34e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <distance_y>
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	9c 01       	movw	r18, r24
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	82 0f       	add	r24, r18
 368:	93 1f       	adc	r25, r19
 36a:	9c 01       	movw	r18, r24
 36c:	99 23       	and	r25, r25
 36e:	14 f4       	brge	.+4      	; 0x374 <main+0xf2>
 370:	2d 5f       	subi	r18, 0xFD	; 253
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	35 95       	asr	r19
 376:	27 95       	ror	r18
 378:	35 95       	asr	r19
 37a:	27 95       	ror	r18
 37c:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <steps_y+0x1>
 380:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <steps_y>
		LCD_write_command(0xc0);
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
		LCD_write_string("X=");
 38a:	80 e6       	ldi	r24, 0x60	; 96
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_write_string>
		LCD_write_num(steps_x);
 392:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <steps_x>
 396:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <steps_x+0x1>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 2e 03 	call	0x65c	; 0x65c <LCD_write_num>
		
		LCD_write_string(" Y=");
 3a2:	8b e6       	ldi	r24, 0x6B	; 107
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_write_string>
		LCD_write_num(steps_y);
 3aa:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <steps_y>
 3ae:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <steps_y+0x1>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 2e 03 	call	0x65c	; 0x65c <LCD_write_num>
		if (go_fwd==1 && (0 == flag_fwd))
 3ba:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <go_fwd>
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	69 f4       	brne	.+26     	; 0x3dc <main+0x15a>
 3c2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <flag_fwd>
 3c6:	81 11       	cpse	r24, r1
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <main+0x15a>
		{
				flag_fwd=1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <flag_fwd>
				SETBIT(TIMSK,TOIE0);
 3d0:	89 b7       	in	r24, 0x39	; 57
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	89 bf       	out	0x39, r24	; 57
				SETBIT(TIMSK,TOIE2);
 3d6:	89 b7       	in	r24, 0x39	; 57
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	89 bf       	out	0x39, r24	; 57
			
			
		}
		
		if (go_rev==1 && (0 == flag_rev))
 3dc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <go_rev>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <main+0x164>
 3e4:	78 cf       	rjmp	.-272    	; 0x2d6 <main+0x54>
 3e6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <flag_rev>
 3ea:	81 11       	cpse	r24, r1
 3ec:	74 cf       	rjmp	.-280    	; 0x2d6 <main+0x54>
		{
			flag_rev=1;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <flag_rev>
			SETBIT(TIMSK,TOIE0);
 3f4:	89 b7       	in	r24, 0x39	; 57
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	89 bf       	out	0x39, r24	; 57
			SETBIT(TIMSK,TOIE2);
 3fa:	89 b7       	in	r24, 0x39	; 57
 3fc:	80 64       	ori	r24, 0x40	; 64
 3fe:	89 bf       	out	0x39, r24	; 57
 400:	6a cf       	rjmp	.-300    	; 0x2d6 <main+0x54>

00000402 <LCD_write_command>:
* Purpose      : write command to lcd
* Parameters   : data: one of LCD commands 
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t data){ // 0x53
	RS(0);
 402:	98 b3       	in	r25, 0x18	; 24
 404:	97 7f       	andi	r25, 0xF7	; 247
 406:	98 bb       	out	0x18, r25	; 24
	D7(READBIT(data,7)); // Data bit7  = D7  
 408:	88 23       	and	r24, r24
 40a:	24 f4       	brge	.+8      	; 0x414 <LCD_write_command+0x12>
 40c:	98 b3       	in	r25, 0x18	; 24
 40e:	90 68       	ori	r25, 0x80	; 128
 410:	98 bb       	out	0x18, r25	; 24
 412:	03 c0       	rjmp	.+6      	; 0x41a <LCD_write_command+0x18>
 414:	98 b3       	in	r25, 0x18	; 24
 416:	9f 77       	andi	r25, 0x7F	; 127
 418:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,6)); // Data bit6  = D6  
 41a:	86 ff       	sbrs	r24, 6
 41c:	04 c0       	rjmp	.+8      	; 0x426 <LCD_write_command+0x24>
 41e:	98 b3       	in	r25, 0x18	; 24
 420:	90 64       	ori	r25, 0x40	; 64
 422:	98 bb       	out	0x18, r25	; 24
 424:	03 c0       	rjmp	.+6      	; 0x42c <LCD_write_command+0x2a>
 426:	98 b3       	in	r25, 0x18	; 24
 428:	9f 7b       	andi	r25, 0xBF	; 191
 42a:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,5)); // Data bit5  = D5  
 42c:	85 ff       	sbrs	r24, 5
 42e:	04 c0       	rjmp	.+8      	; 0x438 <LCD_write_command+0x36>
 430:	98 b3       	in	r25, 0x18	; 24
 432:	90 62       	ori	r25, 0x20	; 32
 434:	98 bb       	out	0x18, r25	; 24
 436:	03 c0       	rjmp	.+6      	; 0x43e <LCD_write_command+0x3c>
 438:	98 b3       	in	r25, 0x18	; 24
 43a:	9f 7d       	andi	r25, 0xDF	; 223
 43c:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,4)); // Data bit4  = D4
 43e:	84 ff       	sbrs	r24, 4
 440:	04 c0       	rjmp	.+8      	; 0x44a <LCD_write_command+0x48>
 442:	98 b3       	in	r25, 0x18	; 24
 444:	90 61       	ori	r25, 0x10	; 16
 446:	98 bb       	out	0x18, r25	; 24
 448:	03 c0       	rjmp	.+6      	; 0x450 <LCD_write_command+0x4e>
 44a:	98 b3       	in	r25, 0x18	; 24
 44c:	9f 7e       	andi	r25, 0xEF	; 239
 44e:	98 bb       	out	0x18, r25	; 24
	EN(1);
 450:	98 b3       	in	r25, 0x18	; 24
 452:	94 60       	ori	r25, 0x04	; 4
 454:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 456:	ef e9       	ldi	r30, 0x9F	; 159
 458:	ff e0       	ldi	r31, 0x0F	; 15
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_write_command+0x58>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_write_command+0x5e>
 460:	00 00       	nop
	_delay_ms(1);
	EN(0);
 462:	98 b3       	in	r25, 0x18	; 24
 464:	9b 7f       	andi	r25, 0xFB	; 251
 466:	98 bb       	out	0x18, r25	; 24
 468:	ef e9       	ldi	r30, 0x9F	; 159
 46a:	ff e0       	ldi	r31, 0x0F	; 15
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_write_command+0x6a>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_write_command+0x70>
 472:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(data,3)); // Data bit3  = D7
 474:	83 ff       	sbrs	r24, 3
 476:	04 c0       	rjmp	.+8      	; 0x480 <LCD_write_command+0x7e>
 478:	98 b3       	in	r25, 0x18	; 24
 47a:	90 68       	ori	r25, 0x80	; 128
 47c:	98 bb       	out	0x18, r25	; 24
 47e:	03 c0       	rjmp	.+6      	; 0x486 <LCD_write_command+0x84>
 480:	98 b3       	in	r25, 0x18	; 24
 482:	9f 77       	andi	r25, 0x7F	; 127
 484:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,2)); // Data bit2  = D6
 486:	82 ff       	sbrs	r24, 2
 488:	04 c0       	rjmp	.+8      	; 0x492 <LCD_write_command+0x90>
 48a:	98 b3       	in	r25, 0x18	; 24
 48c:	90 64       	ori	r25, 0x40	; 64
 48e:	98 bb       	out	0x18, r25	; 24
 490:	03 c0       	rjmp	.+6      	; 0x498 <LCD_write_command+0x96>
 492:	98 b3       	in	r25, 0x18	; 24
 494:	9f 7b       	andi	r25, 0xBF	; 191
 496:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,1)); // Data bit1  = D5
 498:	81 ff       	sbrs	r24, 1
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <LCD_write_command+0xa2>
 49c:	98 b3       	in	r25, 0x18	; 24
 49e:	90 62       	ori	r25, 0x20	; 32
 4a0:	98 bb       	out	0x18, r25	; 24
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <LCD_write_command+0xa8>
 4a4:	98 b3       	in	r25, 0x18	; 24
 4a6:	9f 7d       	andi	r25, 0xDF	; 223
 4a8:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,0)); // Data bit0  = D4
 4aa:	80 ff       	sbrs	r24, 0
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <LCD_write_command+0xb4>
 4ae:	88 b3       	in	r24, 0x18	; 24
 4b0:	80 61       	ori	r24, 0x10	; 16
 4b2:	88 bb       	out	0x18, r24	; 24
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <LCD_write_command+0xba>
 4b6:	88 b3       	in	r24, 0x18	; 24
 4b8:	8f 7e       	andi	r24, 0xEF	; 239
 4ba:	88 bb       	out	0x18, r24	; 24
	EN(1);
 4bc:	88 b3       	in	r24, 0x18	; 24
 4be:	84 60       	ori	r24, 0x04	; 4
 4c0:	88 bb       	out	0x18, r24	; 24
 4c2:	8f e9       	ldi	r24, 0x9F	; 159
 4c4:	9f e0       	ldi	r25, 0x0F	; 15
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_write_command+0xc4>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_write_command+0xca>
 4cc:	00 00       	nop
	_delay_ms(1);
	EN(0);
 4ce:	88 b3       	in	r24, 0x18	; 24
 4d0:	8b 7f       	andi	r24, 0xFB	; 251
 4d2:	88 bb       	out	0x18, r24	; 24
 4d4:	ef e9       	ldi	r30, 0x9F	; 159
 4d6:	ff e0       	ldi	r31, 0x0F	; 15
 4d8:	31 97       	sbiw	r30, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_write_command+0xd6>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_write_command+0xdc>
 4de:	00 00       	nop
 4e0:	08 95       	ret

000004e2 <LCD_init>:
* Purpose      : Init lcd in 4 bit mode, clear lcd and turn off cursor
* Parameters   : void 
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PIN;
 4e2:	87 b3       	in	r24, 0x17	; 23
 4e4:	8c 6f       	ori	r24, 0xFC	; 252
 4e6:	87 bb       	out	0x17, r24	; 23
	LCD_write_command(0x3);
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
 4ee:	8f e7       	ldi	r24, 0x7F	; 127
 4f0:	9e e3       	ldi	r25, 0x3E	; 62
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <LCD_init+0x10>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <LCD_init+0x16>
 4f8:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 4fa:	83 e0       	ldi	r24, 0x03	; 3
 4fc:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
 500:	8f e7       	ldi	r24, 0x7F	; 127
 502:	9e e3       	ldi	r25, 0x3E	; 62
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <LCD_init+0x22>
 508:	00 c0       	rjmp	.+0      	; 0x50a <LCD_init+0x28>
 50a:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
 512:	8f e7       	ldi	r24, 0x7F	; 127
 514:	9e e3       	ldi	r25, 0x3E	; 62
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <LCD_init+0x34>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCD_init+0x3a>
 51c:	00 00       	nop
	_delay_ms(4);
	
	LCD_write_command(0x2);
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
	LCD_write_command(0x28);
 524:	88 e2       	ldi	r24, 0x28	; 40
 526:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
	LCD_write_command(0x08);
 52a:	88 e0       	ldi	r24, 0x08	; 8
 52c:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
	LCD_write_command(0x1);
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
	LCD_write_command(0x6);
 536:	86 e0       	ldi	r24, 0x06	; 6
 538:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
	LCD_write_command(0xc);
 53c:	8c e0       	ldi	r24, 0x0C	; 12
 53e:	0e 94 01 02 	call	0x402	; 0x402 <LCD_write_command>
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	29 ef       	ldi	r18, 0xF9	; 249
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	91 50       	subi	r25, 0x01	; 1
 54a:	20 40       	sbci	r18, 0x00	; 0
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <LCD_init+0x66>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_init+0x70>
 552:	00 00       	nop
 554:	08 95       	ret

00000556 <LCD_write_data>:
* Purpose      : write symbol on lcd
* Parameters   : data: Ascii value of specific symbol
* Return value : void
*****************************************************************************/
void LCD_write_data(uint8_t data){ // 0x53
	RS(1);
 556:	98 b3       	in	r25, 0x18	; 24
 558:	98 60       	ori	r25, 0x08	; 8
 55a:	98 bb       	out	0x18, r25	; 24
	D7(READBIT(data,7)); // Data bit7  = D7
 55c:	88 23       	and	r24, r24
 55e:	24 f4       	brge	.+8      	; 0x568 <LCD_write_data+0x12>
 560:	98 b3       	in	r25, 0x18	; 24
 562:	90 68       	ori	r25, 0x80	; 128
 564:	98 bb       	out	0x18, r25	; 24
 566:	03 c0       	rjmp	.+6      	; 0x56e <LCD_write_data+0x18>
 568:	98 b3       	in	r25, 0x18	; 24
 56a:	9f 77       	andi	r25, 0x7F	; 127
 56c:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,6)); // Data bit6  = D6
 56e:	86 ff       	sbrs	r24, 6
 570:	04 c0       	rjmp	.+8      	; 0x57a <LCD_write_data+0x24>
 572:	98 b3       	in	r25, 0x18	; 24
 574:	90 64       	ori	r25, 0x40	; 64
 576:	98 bb       	out	0x18, r25	; 24
 578:	03 c0       	rjmp	.+6      	; 0x580 <LCD_write_data+0x2a>
 57a:	98 b3       	in	r25, 0x18	; 24
 57c:	9f 7b       	andi	r25, 0xBF	; 191
 57e:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,5)); // Data bit5  = D5
 580:	85 ff       	sbrs	r24, 5
 582:	04 c0       	rjmp	.+8      	; 0x58c <LCD_write_data+0x36>
 584:	98 b3       	in	r25, 0x18	; 24
 586:	90 62       	ori	r25, 0x20	; 32
 588:	98 bb       	out	0x18, r25	; 24
 58a:	03 c0       	rjmp	.+6      	; 0x592 <LCD_write_data+0x3c>
 58c:	98 b3       	in	r25, 0x18	; 24
 58e:	9f 7d       	andi	r25, 0xDF	; 223
 590:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,4)); // Data bit4  = D4
 592:	84 ff       	sbrs	r24, 4
 594:	04 c0       	rjmp	.+8      	; 0x59e <LCD_write_data+0x48>
 596:	98 b3       	in	r25, 0x18	; 24
 598:	90 61       	ori	r25, 0x10	; 16
 59a:	98 bb       	out	0x18, r25	; 24
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <LCD_write_data+0x4e>
 59e:	98 b3       	in	r25, 0x18	; 24
 5a0:	9f 7e       	andi	r25, 0xEF	; 239
 5a2:	98 bb       	out	0x18, r25	; 24
	EN(1);
 5a4:	98 b3       	in	r25, 0x18	; 24
 5a6:	94 60       	ori	r25, 0x04	; 4
 5a8:	98 bb       	out	0x18, r25	; 24
 5aa:	ef e9       	ldi	r30, 0x9F	; 159
 5ac:	ff e0       	ldi	r31, 0x0F	; 15
 5ae:	31 97       	sbiw	r30, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <LCD_write_data+0x58>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <LCD_write_data+0x5e>
 5b4:	00 00       	nop
	_delay_ms(1);
	EN(0);
 5b6:	98 b3       	in	r25, 0x18	; 24
 5b8:	9b 7f       	andi	r25, 0xFB	; 251
 5ba:	98 bb       	out	0x18, r25	; 24
 5bc:	ef e9       	ldi	r30, 0x9F	; 159
 5be:	ff e0       	ldi	r31, 0x0F	; 15
 5c0:	31 97       	sbiw	r30, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <LCD_write_data+0x6a>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <LCD_write_data+0x70>
 5c6:	00 00       	nop
	_delay_ms(1);

	D7(READBIT(data,3)); // Data bit3  = D7
 5c8:	83 ff       	sbrs	r24, 3
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <LCD_write_data+0x7e>
 5cc:	98 b3       	in	r25, 0x18	; 24
 5ce:	90 68       	ori	r25, 0x80	; 128
 5d0:	98 bb       	out	0x18, r25	; 24
 5d2:	03 c0       	rjmp	.+6      	; 0x5da <LCD_write_data+0x84>
 5d4:	98 b3       	in	r25, 0x18	; 24
 5d6:	9f 77       	andi	r25, 0x7F	; 127
 5d8:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,2)); // Data bit2  = D6
 5da:	82 ff       	sbrs	r24, 2
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <LCD_write_data+0x90>
 5de:	98 b3       	in	r25, 0x18	; 24
 5e0:	90 64       	ori	r25, 0x40	; 64
 5e2:	98 bb       	out	0x18, r25	; 24
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <LCD_write_data+0x96>
 5e6:	98 b3       	in	r25, 0x18	; 24
 5e8:	9f 7b       	andi	r25, 0xBF	; 191
 5ea:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,1)); // Data bit1  = D5
 5ec:	81 ff       	sbrs	r24, 1
 5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <LCD_write_data+0xa2>
 5f0:	98 b3       	in	r25, 0x18	; 24
 5f2:	90 62       	ori	r25, 0x20	; 32
 5f4:	98 bb       	out	0x18, r25	; 24
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <LCD_write_data+0xa8>
 5f8:	98 b3       	in	r25, 0x18	; 24
 5fa:	9f 7d       	andi	r25, 0xDF	; 223
 5fc:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,0)); // Data bit0  = D4
 5fe:	80 ff       	sbrs	r24, 0
 600:	04 c0       	rjmp	.+8      	; 0x60a <LCD_write_data+0xb4>
 602:	88 b3       	in	r24, 0x18	; 24
 604:	80 61       	ori	r24, 0x10	; 16
 606:	88 bb       	out	0x18, r24	; 24
 608:	03 c0       	rjmp	.+6      	; 0x610 <LCD_write_data+0xba>
 60a:	88 b3       	in	r24, 0x18	; 24
 60c:	8f 7e       	andi	r24, 0xEF	; 239
 60e:	88 bb       	out	0x18, r24	; 24
	EN(1);
 610:	88 b3       	in	r24, 0x18	; 24
 612:	84 60       	ori	r24, 0x04	; 4
 614:	88 bb       	out	0x18, r24	; 24
 616:	8f e9       	ldi	r24, 0x9F	; 159
 618:	9f e0       	ldi	r25, 0x0F	; 15
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_write_data+0xc4>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_write_data+0xca>
 620:	00 00       	nop
	_delay_ms(1);
	EN(0);
 622:	88 b3       	in	r24, 0x18	; 24
 624:	8b 7f       	andi	r24, 0xFB	; 251
 626:	88 bb       	out	0x18, r24	; 24
 628:	ef e9       	ldi	r30, 0x9F	; 159
 62a:	ff e0       	ldi	r31, 0x0F	; 15
 62c:	31 97       	sbiw	r30, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <LCD_write_data+0xd6>
 630:	00 c0       	rjmp	.+0      	; 0x632 <LCD_write_data+0xdc>
 632:	00 00       	nop
 634:	08 95       	ret

00000636 <LCD_write_string>:
* Function Name: LCD_write_data
* Purpose      : write a string on lCD
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(char *data){
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	8c 01       	movw	r16, r24
	uint8_t i =0;
 63e:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] != '\0'){
 640:	03 c0       	rjmp	.+6      	; 0x648 <LCD_write_string+0x12>
		LCD_write_data(data[i]);
 642:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_write_data>
		i++;
 646:	cf 5f       	subi	r28, 0xFF	; 255
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(char *data){
	uint8_t i =0;
	while(data[i] != '\0'){
 648:	f8 01       	movw	r30, r16
 64a:	ec 0f       	add	r30, r28
 64c:	f1 1d       	adc	r31, r1
 64e:	80 81       	ld	r24, Z
 650:	81 11       	cpse	r24, r1
 652:	f7 cf       	rjmp	.-18     	; 0x642 <LCD_write_string+0xc>
		LCD_write_data(data[i]);
		i++;
	}
}
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	08 95       	ret

0000065c <LCD_write_num>:
* Function Name: LCD_write_num
* Purpose      : write a number on lCD
* Parameters   : num: number to be written
* Return value : void
*****************************************************************************/
void LCD_write_num(uint32_t num){
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	2a 97       	sbiw	r28, 0x0a	; 10
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) {
 672:	61 15       	cp	r22, r1
 674:	71 05       	cpc	r23, r1
 676:	81 05       	cpc	r24, r1
 678:	91 05       	cpc	r25, r1
 67a:	d1 f4       	brne	.+52     	; 0x6b0 <LCD_write_num+0x54>
		LCD_write_data('0');
 67c:	80 e3       	ldi	r24, 0x30	; 48
 67e:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_write_data>
 682:	2c c0       	rjmp	.+88     	; 0x6dc <LCD_write_num+0x80>
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
 684:	2a e0       	ldi	r18, 0x0A	; 10
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	40 e0       	ldi	r20, 0x00	; 0
 68a:	50 e0       	ldi	r21, 0x00	; 0
 68c:	0e 94 49 06 	call	0xc92	; 0xc92 <__udivmodsi4>
 690:	e1 e0       	ldi	r30, 0x01	; 1
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	ec 0f       	add	r30, r28
 696:	fd 1f       	adc	r31, r29
 698:	e1 0f       	add	r30, r17
 69a:	f1 1d       	adc	r31, r1
 69c:	17 fd       	sbrc	r17, 7
 69e:	fa 95       	dec	r31
 6a0:	60 5d       	subi	r22, 0xD0	; 208
 6a2:	60 83       	st	Z, r22
		num /= 10;
 6a4:	62 2f       	mov	r22, r18
 6a6:	73 2f       	mov	r23, r19
 6a8:	84 2f       	mov	r24, r20
 6aa:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_data('0');
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
 6ac:	1f 5f       	subi	r17, 0xFF	; 255
 6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <LCD_write_num+0x56>
 6b0:	10 e0       	ldi	r17, 0x00	; 0
 6b2:	61 15       	cp	r22, r1
 6b4:	71 05       	cpc	r23, r1
 6b6:	81 05       	cpc	r24, r1
 6b8:	91 05       	cpc	r25, r1
 6ba:	21 f7       	brne	.-56     	; 0x684 <LCD_write_num+0x28>
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
 6bc:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0){
 6be:	0c c0       	rjmp	.+24     	; 0x6d8 <LCD_write_num+0x7c>
		LCD_write_data(num_arr[i]);
 6c0:	e1 e0       	ldi	r30, 0x01	; 1
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	ec 0f       	add	r30, r28
 6c6:	fd 1f       	adc	r31, r29
 6c8:	e1 0f       	add	r30, r17
 6ca:	f1 1d       	adc	r31, r1
 6cc:	17 fd       	sbrc	r17, 7
 6ce:	fa 95       	dec	r31
 6d0:	80 81       	ld	r24, Z
 6d2:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_write_data>
		i--;
 6d6:	11 50       	subi	r17, 0x01	; 1
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
	while (i >= 0){
 6d8:	11 23       	and	r17, r17
 6da:	94 f7       	brge	.-28     	; 0x6c0 <LCD_write_num+0x64>
		LCD_write_data(num_arr[i]);
		i--;
	}
 6dc:	2a 96       	adiw	r28, 0x0a	; 10
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	de bf       	out	0x3e, r29	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	cd bf       	out	0x3d, r28	; 61
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	08 95       	ret

000006f0 <Stepper_init>:
 *  Author: Electronica Care
 */ 
#include "Stepper.h"
#define period 5
void Stepper_init(void){
	 DDRC=0xff;
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	84 bb       	out	0x14, r24	; 20
 6f4:	08 95       	ret

000006f6 <Stepper_Run>:
	
}

void Stepper_Run(uint8_t direction,char motor){
	switch (motor)
 6f6:	68 37       	cpi	r22, 0x78	; 120
 6f8:	21 f0       	breq	.+8      	; 0x702 <Stepper_Run+0xc>
 6fa:	69 37       	cpi	r22, 0x79	; 121
 6fc:	09 f4       	brne	.+2      	; 0x700 <Stepper_Run+0xa>
 6fe:	be c0       	rjmp	.+380    	; 0x87c <__stack+0x1d>
 700:	08 95       	ret
	{
		case 'x':
		{
			if (direction==0)
 702:	81 11       	cpse	r24, r1
 704:	5e c0       	rjmp	.+188    	; 0x7c2 <Stepper_Run+0xcc>
			{
				SETBIT(PORTC,0);
 706:	95 b3       	in	r25, 0x15	; 21
 708:	91 60       	ori	r25, 0x01	; 1
 70a:	95 bb       	out	0x15, r25	; 21
				SETBIT(PORTC,3);
 70c:	95 b3       	in	r25, 0x15	; 21
 70e:	98 60       	ori	r25, 0x08	; 8
 710:	95 bb       	out	0x15, r25	; 21
 712:	ef e1       	ldi	r30, 0x1F	; 31
 714:	fe e4       	ldi	r31, 0x4E	; 78
 716:	31 97       	sbiw	r30, 0x01	; 1
 718:	f1 f7       	brne	.-4      	; 0x716 <Stepper_Run+0x20>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <Stepper_Run+0x26>
 71c:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,0);
 71e:	95 b3       	in	r25, 0x15	; 21
 720:	9e 7f       	andi	r25, 0xFE	; 254
 722:	95 bb       	out	0x15, r25	; 21
				SETBIT(PORTC,3);
 724:	95 b3       	in	r25, 0x15	; 21
 726:	98 60       	ori	r25, 0x08	; 8
 728:	95 bb       	out	0x15, r25	; 21
 72a:	ef e1       	ldi	r30, 0x1F	; 31
 72c:	fe e4       	ldi	r31, 0x4E	; 78
 72e:	31 97       	sbiw	r30, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <Stepper_Run+0x38>
 732:	00 c0       	rjmp	.+0      	; 0x734 <Stepper_Run+0x3e>
 734:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,2);
 736:	95 b3       	in	r25, 0x15	; 21
 738:	94 60       	ori	r25, 0x04	; 4
 73a:	95 bb       	out	0x15, r25	; 21
 73c:	ef e1       	ldi	r30, 0x1F	; 31
 73e:	fe e4       	ldi	r31, 0x4E	; 78
 740:	31 97       	sbiw	r30, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <Stepper_Run+0x4a>
 744:	00 c0       	rjmp	.+0      	; 0x746 <Stepper_Run+0x50>
 746:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,3);
 748:	95 b3       	in	r25, 0x15	; 21
 74a:	97 7f       	andi	r25, 0xF7	; 247
 74c:	95 bb       	out	0x15, r25	; 21
				SETBIT(PORTC,2);
 74e:	95 b3       	in	r25, 0x15	; 21
 750:	94 60       	ori	r25, 0x04	; 4
 752:	95 bb       	out	0x15, r25	; 21
 754:	ef e1       	ldi	r30, 0x1F	; 31
 756:	fe e4       	ldi	r31, 0x4E	; 78
 758:	31 97       	sbiw	r30, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <Stepper_Run+0x62>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <Stepper_Run+0x68>
 75e:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,1);
 760:	95 b3       	in	r25, 0x15	; 21
 762:	92 60       	ori	r25, 0x02	; 2
 764:	95 bb       	out	0x15, r25	; 21
 766:	ef e1       	ldi	r30, 0x1F	; 31
 768:	fe e4       	ldi	r31, 0x4E	; 78
 76a:	31 97       	sbiw	r30, 0x01	; 1
 76c:	f1 f7       	brne	.-4      	; 0x76a <Stepper_Run+0x74>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <Stepper_Run+0x7a>
 770:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,2);
 772:	95 b3       	in	r25, 0x15	; 21
 774:	9b 7f       	andi	r25, 0xFB	; 251
 776:	95 bb       	out	0x15, r25	; 21
 778:	ef e1       	ldi	r30, 0x1F	; 31
 77a:	fe e4       	ldi	r31, 0x4E	; 78
 77c:	31 97       	sbiw	r30, 0x01	; 1
 77e:	f1 f7       	brne	.-4      	; 0x77c <Stepper_Run+0x86>
 780:	00 c0       	rjmp	.+0      	; 0x782 <Stepper_Run+0x8c>
 782:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,0);
 784:	95 b3       	in	r25, 0x15	; 21
 786:	91 60       	ori	r25, 0x01	; 1
 788:	95 bb       	out	0x15, r25	; 21
 78a:	ef e1       	ldi	r30, 0x1F	; 31
 78c:	fe e4       	ldi	r31, 0x4E	; 78
 78e:	31 97       	sbiw	r30, 0x01	; 1
 790:	f1 f7       	brne	.-4      	; 0x78e <Stepper_Run+0x98>
 792:	00 c0       	rjmp	.+0      	; 0x794 <Stepper_Run+0x9e>
 794:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,1);
 796:	95 b3       	in	r25, 0x15	; 21
 798:	9d 7f       	andi	r25, 0xFD	; 253
 79a:	95 bb       	out	0x15, r25	; 21
 79c:	ef e1       	ldi	r30, 0x1F	; 31
 79e:	fe e4       	ldi	r31, 0x4E	; 78
 7a0:	31 97       	sbiw	r30, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <Stepper_Run+0xaa>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <Stepper_Run+0xb0>
 7a6:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,0);
 7a8:	95 b3       	in	r25, 0x15	; 21
 7aa:	91 60       	ori	r25, 0x01	; 1
 7ac:	95 bb       	out	0x15, r25	; 21
				SETBIT(PORTC,3);
 7ae:	95 b3       	in	r25, 0x15	; 21
 7b0:	98 60       	ori	r25, 0x08	; 8
 7b2:	95 bb       	out	0x15, r25	; 21
 7b4:	ef e1       	ldi	r30, 0x1F	; 31
 7b6:	fe e4       	ldi	r31, 0x4E	; 78
 7b8:	31 97       	sbiw	r30, 0x01	; 1
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <Stepper_Run+0xc2>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <Stepper_Run+0xc8>
 7be:	00 00       	nop
 7c0:	5d c0       	rjmp	.+186    	; 0x87c <__stack+0x1d>
				_delay_ms(period);
			}else{
				SETBIT(PORTC,0);
 7c2:	95 b3       	in	r25, 0x15	; 21
 7c4:	91 60       	ori	r25, 0x01	; 1
 7c6:	95 bb       	out	0x15, r25	; 21
				SETBIT(PORTC,3);
 7c8:	95 b3       	in	r25, 0x15	; 21
 7ca:	98 60       	ori	r25, 0x08	; 8
 7cc:	95 bb       	out	0x15, r25	; 21
 7ce:	ef e1       	ldi	r30, 0x1F	; 31
 7d0:	fe e4       	ldi	r31, 0x4E	; 78
 7d2:	31 97       	sbiw	r30, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <Stepper_Run+0xdc>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <Stepper_Run+0xe2>
 7d8:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,3);
 7da:	95 b3       	in	r25, 0x15	; 21
 7dc:	97 7f       	andi	r25, 0xF7	; 247
 7de:	95 bb       	out	0x15, r25	; 21
				SETBIT(PORTC,0);
 7e0:	95 b3       	in	r25, 0x15	; 21
 7e2:	91 60       	ori	r25, 0x01	; 1
 7e4:	95 bb       	out	0x15, r25	; 21
 7e6:	ef e1       	ldi	r30, 0x1F	; 31
 7e8:	fe e4       	ldi	r31, 0x4E	; 78
 7ea:	31 97       	sbiw	r30, 0x01	; 1
 7ec:	f1 f7       	brne	.-4      	; 0x7ea <Stepper_Run+0xf4>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <Stepper_Run+0xfa>
 7f0:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,1);
 7f2:	95 b3       	in	r25, 0x15	; 21
 7f4:	92 60       	ori	r25, 0x02	; 2
 7f6:	95 bb       	out	0x15, r25	; 21
 7f8:	ef e1       	ldi	r30, 0x1F	; 31
 7fa:	fe e4       	ldi	r31, 0x4E	; 78
 7fc:	31 97       	sbiw	r30, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <Stepper_Run+0x106>
 800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 802:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,0);
 804:	95 b3       	in	r25, 0x15	; 21
 806:	9e 7f       	andi	r25, 0xFE	; 254
 808:	95 bb       	out	0x15, r25	; 21
				SETBIT(PORTC,1);
 80a:	95 b3       	in	r25, 0x15	; 21
 80c:	92 60       	ori	r25, 0x02	; 2
 80e:	95 bb       	out	0x15, r25	; 21
 810:	ef e1       	ldi	r30, 0x1F	; 31
 812:	fe e4       	ldi	r31, 0x4E	; 78
 814:	31 97       	sbiw	r30, 0x01	; 1
 816:	f1 f7       	brne	.-4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 818:	00 c0       	rjmp	.+0      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 81a:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,2);
 81c:	95 b3       	in	r25, 0x15	; 21
 81e:	94 60       	ori	r25, 0x04	; 4
 820:	95 bb       	out	0x15, r25	; 21
 822:	ef e1       	ldi	r30, 0x1F	; 31
 824:	fe e4       	ldi	r31, 0x4E	; 78
 826:	31 97       	sbiw	r30, 0x01	; 1
 828:	f1 f7       	brne	.-4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82a:	00 c0       	rjmp	.+0      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 82c:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,1);
 82e:	95 b3       	in	r25, 0x15	; 21
 830:	9d 7f       	andi	r25, 0xFD	; 253
 832:	95 bb       	out	0x15, r25	; 21
 834:	ef e1       	ldi	r30, 0x1F	; 31
 836:	fe e4       	ldi	r31, 0x4E	; 78
 838:	31 97       	sbiw	r30, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83e:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,3);
 840:	95 b3       	in	r25, 0x15	; 21
 842:	98 60       	ori	r25, 0x08	; 8
 844:	95 bb       	out	0x15, r25	; 21
 846:	ef e1       	ldi	r30, 0x1F	; 31
 848:	fe e4       	ldi	r31, 0x4E	; 78
 84a:	31 97       	sbiw	r30, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 850:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,2);
 852:	95 b3       	in	r25, 0x15	; 21
 854:	9b 7f       	andi	r25, 0xFB	; 251
 856:	95 bb       	out	0x15, r25	; 21
 858:	ef e1       	ldi	r30, 0x1F	; 31
 85a:	fe e4       	ldi	r31, 0x4E	; 78
 85c:	31 97       	sbiw	r30, 0x01	; 1
 85e:	f1 f7       	brne	.-4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
 862:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,0);
 864:	95 b3       	in	r25, 0x15	; 21
 866:	91 60       	ori	r25, 0x01	; 1
 868:	95 bb       	out	0x15, r25	; 21
				SETBIT(PORTC,3);
 86a:	95 b3       	in	r25, 0x15	; 21
 86c:	98 60       	ori	r25, 0x08	; 8
 86e:	95 bb       	out	0x15, r25	; 21
 870:	ef e1       	ldi	r30, 0x1F	; 31
 872:	fe e4       	ldi	r31, 0x4E	; 78
 874:	31 97       	sbiw	r30, 0x01	; 1
 876:	f1 f7       	brne	.-4      	; 0x874 <__stack+0x15>
 878:	00 c0       	rjmp	.+0      	; 0x87a <__stack+0x1b>
 87a:	00 00       	nop
			}
		}
		
	case 'y':
		{
			if (direction==0)
 87c:	81 11       	cpse	r24, r1
 87e:	5e c0       	rjmp	.+188    	; 0x93c <__stack+0xdd>
			{
				SETBIT(PORTC,4);
 880:	85 b3       	in	r24, 0x15	; 21
 882:	80 61       	ori	r24, 0x10	; 16
 884:	85 bb       	out	0x15, r24	; 21
				SETBIT(PORTC,7);
 886:	85 b3       	in	r24, 0x15	; 21
 888:	80 68       	ori	r24, 0x80	; 128
 88a:	85 bb       	out	0x15, r24	; 21
 88c:	8f e1       	ldi	r24, 0x1F	; 31
 88e:	9e e4       	ldi	r25, 0x4E	; 78
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	f1 f7       	brne	.-4      	; 0x890 <__stack+0x31>
 894:	00 c0       	rjmp	.+0      	; 0x896 <__stack+0x37>
 896:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,4);
 898:	85 b3       	in	r24, 0x15	; 21
 89a:	8f 7e       	andi	r24, 0xEF	; 239
 89c:	85 bb       	out	0x15, r24	; 21
				SETBIT(PORTC,7);
 89e:	85 b3       	in	r24, 0x15	; 21
 8a0:	80 68       	ori	r24, 0x80	; 128
 8a2:	85 bb       	out	0x15, r24	; 21
 8a4:	ef e1       	ldi	r30, 0x1F	; 31
 8a6:	fe e4       	ldi	r31, 0x4E	; 78
 8a8:	31 97       	sbiw	r30, 0x01	; 1
 8aa:	f1 f7       	brne	.-4      	; 0x8a8 <__stack+0x49>
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <__stack+0x4f>
 8ae:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,6);
 8b0:	85 b3       	in	r24, 0x15	; 21
 8b2:	80 64       	ori	r24, 0x40	; 64
 8b4:	85 bb       	out	0x15, r24	; 21
 8b6:	8f e1       	ldi	r24, 0x1F	; 31
 8b8:	9e e4       	ldi	r25, 0x4E	; 78
 8ba:	01 97       	sbiw	r24, 0x01	; 1
 8bc:	f1 f7       	brne	.-4      	; 0x8ba <__stack+0x5b>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__stack+0x61>
 8c0:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,7);
 8c2:	85 b3       	in	r24, 0x15	; 21
 8c4:	8f 77       	andi	r24, 0x7F	; 127
 8c6:	85 bb       	out	0x15, r24	; 21
				SETBIT(PORTC,6);
 8c8:	85 b3       	in	r24, 0x15	; 21
 8ca:	80 64       	ori	r24, 0x40	; 64
 8cc:	85 bb       	out	0x15, r24	; 21
 8ce:	ef e1       	ldi	r30, 0x1F	; 31
 8d0:	fe e4       	ldi	r31, 0x4E	; 78
 8d2:	31 97       	sbiw	r30, 0x01	; 1
 8d4:	f1 f7       	brne	.-4      	; 0x8d2 <__stack+0x73>
 8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <__stack+0x79>
 8d8:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,5);
 8da:	85 b3       	in	r24, 0x15	; 21
 8dc:	80 62       	ori	r24, 0x20	; 32
 8de:	85 bb       	out	0x15, r24	; 21
 8e0:	8f e1       	ldi	r24, 0x1F	; 31
 8e2:	9e e4       	ldi	r25, 0x4E	; 78
 8e4:	01 97       	sbiw	r24, 0x01	; 1
 8e6:	f1 f7       	brne	.-4      	; 0x8e4 <__stack+0x85>
 8e8:	00 c0       	rjmp	.+0      	; 0x8ea <__stack+0x8b>
 8ea:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,6);
 8ec:	85 b3       	in	r24, 0x15	; 21
 8ee:	8f 7b       	andi	r24, 0xBF	; 191
 8f0:	85 bb       	out	0x15, r24	; 21
 8f2:	ef e1       	ldi	r30, 0x1F	; 31
 8f4:	fe e4       	ldi	r31, 0x4E	; 78
 8f6:	31 97       	sbiw	r30, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <__stack+0x97>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <__stack+0x9d>
 8fc:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,4);
 8fe:	85 b3       	in	r24, 0x15	; 21
 900:	80 61       	ori	r24, 0x10	; 16
 902:	85 bb       	out	0x15, r24	; 21
 904:	8f e1       	ldi	r24, 0x1F	; 31
 906:	9e e4       	ldi	r25, 0x4E	; 78
 908:	01 97       	sbiw	r24, 0x01	; 1
 90a:	f1 f7       	brne	.-4      	; 0x908 <__stack+0xa9>
 90c:	00 c0       	rjmp	.+0      	; 0x90e <__stack+0xaf>
 90e:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,5);
 910:	85 b3       	in	r24, 0x15	; 21
 912:	8f 7d       	andi	r24, 0xDF	; 223
 914:	85 bb       	out	0x15, r24	; 21
 916:	ef e1       	ldi	r30, 0x1F	; 31
 918:	fe e4       	ldi	r31, 0x4E	; 78
 91a:	31 97       	sbiw	r30, 0x01	; 1
 91c:	f1 f7       	brne	.-4      	; 0x91a <__stack+0xbb>
 91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0xc1>
 920:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,7);
 922:	85 b3       	in	r24, 0x15	; 21
 924:	80 68       	ori	r24, 0x80	; 128
 926:	85 bb       	out	0x15, r24	; 21
				SETBIT(PORTC,4);
 928:	85 b3       	in	r24, 0x15	; 21
 92a:	80 61       	ori	r24, 0x10	; 16
 92c:	85 bb       	out	0x15, r24	; 21
 92e:	8f e1       	ldi	r24, 0x1F	; 31
 930:	9e e4       	ldi	r25, 0x4E	; 78
 932:	01 97       	sbiw	r24, 0x01	; 1
 934:	f1 f7       	brne	.-4      	; 0x932 <__stack+0xd3>
 936:	00 c0       	rjmp	.+0      	; 0x938 <__stack+0xd9>
 938:	00 00       	nop
 93a:	08 95       	ret
				_delay_ms(period);
			}else{
				SETBIT(PORTC,4);
 93c:	85 b3       	in	r24, 0x15	; 21
 93e:	80 61       	ori	r24, 0x10	; 16
 940:	85 bb       	out	0x15, r24	; 21
				SETBIT(PORTC,7);
 942:	85 b3       	in	r24, 0x15	; 21
 944:	80 68       	ori	r24, 0x80	; 128
 946:	85 bb       	out	0x15, r24	; 21
 948:	ef e1       	ldi	r30, 0x1F	; 31
 94a:	fe e4       	ldi	r31, 0x4E	; 78
 94c:	31 97       	sbiw	r30, 0x01	; 1
 94e:	f1 f7       	brne	.-4      	; 0x94c <__stack+0xed>
 950:	00 c0       	rjmp	.+0      	; 0x952 <__stack+0xf3>
 952:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,7);
 954:	85 b3       	in	r24, 0x15	; 21
 956:	8f 77       	andi	r24, 0x7F	; 127
 958:	85 bb       	out	0x15, r24	; 21
				SETBIT(PORTC,4);
 95a:	85 b3       	in	r24, 0x15	; 21
 95c:	80 61       	ori	r24, 0x10	; 16
 95e:	85 bb       	out	0x15, r24	; 21
 960:	8f e1       	ldi	r24, 0x1F	; 31
 962:	9e e4       	ldi	r25, 0x4E	; 78
 964:	01 97       	sbiw	r24, 0x01	; 1
 966:	f1 f7       	brne	.-4      	; 0x964 <__stack+0x105>
 968:	00 c0       	rjmp	.+0      	; 0x96a <__stack+0x10b>
 96a:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,5);
 96c:	85 b3       	in	r24, 0x15	; 21
 96e:	80 62       	ori	r24, 0x20	; 32
 970:	85 bb       	out	0x15, r24	; 21
 972:	ef e1       	ldi	r30, 0x1F	; 31
 974:	fe e4       	ldi	r31, 0x4E	; 78
 976:	31 97       	sbiw	r30, 0x01	; 1
 978:	f1 f7       	brne	.-4      	; 0x976 <__stack+0x117>
 97a:	00 c0       	rjmp	.+0      	; 0x97c <__stack+0x11d>
 97c:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,4);
 97e:	85 b3       	in	r24, 0x15	; 21
 980:	8f 7e       	andi	r24, 0xEF	; 239
 982:	85 bb       	out	0x15, r24	; 21
				SETBIT(PORTC,5);
 984:	85 b3       	in	r24, 0x15	; 21
 986:	80 62       	ori	r24, 0x20	; 32
 988:	85 bb       	out	0x15, r24	; 21
 98a:	8f e1       	ldi	r24, 0x1F	; 31
 98c:	9e e4       	ldi	r25, 0x4E	; 78
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	f1 f7       	brne	.-4      	; 0x98e <__stack+0x12f>
 992:	00 c0       	rjmp	.+0      	; 0x994 <__stack+0x135>
 994:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,6);
 996:	85 b3       	in	r24, 0x15	; 21
 998:	80 64       	ori	r24, 0x40	; 64
 99a:	85 bb       	out	0x15, r24	; 21
 99c:	ef e1       	ldi	r30, 0x1F	; 31
 99e:	fe e4       	ldi	r31, 0x4E	; 78
 9a0:	31 97       	sbiw	r30, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <__stack+0x141>
 9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <__stack+0x147>
 9a6:	00 00       	nop
				_delay_ms(5);
				CLRBIT(PORTC,5);
 9a8:	85 b3       	in	r24, 0x15	; 21
 9aa:	8f 7d       	andi	r24, 0xDF	; 223
 9ac:	85 bb       	out	0x15, r24	; 21
 9ae:	8f e1       	ldi	r24, 0x1F	; 31
 9b0:	9e e4       	ldi	r25, 0x4E	; 78
 9b2:	01 97       	sbiw	r24, 0x01	; 1
 9b4:	f1 f7       	brne	.-4      	; 0x9b2 <__stack+0x153>
 9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <__stack+0x159>
 9b8:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,7);
 9ba:	85 b3       	in	r24, 0x15	; 21
 9bc:	80 68       	ori	r24, 0x80	; 128
 9be:	85 bb       	out	0x15, r24	; 21
 9c0:	ef e1       	ldi	r30, 0x1F	; 31
 9c2:	fe e4       	ldi	r31, 0x4E	; 78
 9c4:	31 97       	sbiw	r30, 0x01	; 1
 9c6:	f1 f7       	brne	.-4      	; 0x9c4 <__stack+0x165>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <__stack+0x16b>
 9ca:	00 00       	nop
				_delay_ms(period);
				CLRBIT(PORTC,6);
 9cc:	85 b3       	in	r24, 0x15	; 21
 9ce:	8f 7b       	andi	r24, 0xBF	; 191
 9d0:	85 bb       	out	0x15, r24	; 21
 9d2:	8f e1       	ldi	r24, 0x1F	; 31
 9d4:	9e e4       	ldi	r25, 0x4E	; 78
 9d6:	01 97       	sbiw	r24, 0x01	; 1
 9d8:	f1 f7       	brne	.-4      	; 0x9d6 <__stack+0x177>
 9da:	00 c0       	rjmp	.+0      	; 0x9dc <__stack+0x17d>
 9dc:	00 00       	nop
				_delay_ms(period);
				SETBIT(PORTC,7);
 9de:	85 b3       	in	r24, 0x15	; 21
 9e0:	80 68       	ori	r24, 0x80	; 128
 9e2:	85 bb       	out	0x15, r24	; 21
				SETBIT(PORTC,4);
 9e4:	85 b3       	in	r24, 0x15	; 21
 9e6:	80 61       	ori	r24, 0x10	; 16
 9e8:	85 bb       	out	0x15, r24	; 21
 9ea:	ef e1       	ldi	r30, 0x1F	; 31
 9ec:	fe e4       	ldi	r31, 0x4E	; 78
 9ee:	31 97       	sbiw	r30, 0x01	; 1
 9f0:	f1 f7       	brne	.-4      	; 0x9ee <__stack+0x18f>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <__stack+0x195>
 9f4:	00 00       	nop
 9f6:	08 95       	ret

000009f8 <EXTERNAL_ENTERRUPT_init>:
 */ 
#include "EXTERNAL_ENTERRUPT.h"
void (*EXTERNAL_ENTERRUPT0_isr)(void);
void (*EXTERNAL_ENTERRUPT1_isr)(void);
void EXTERNAL_ENTERRUPT_init(void){
	CLRBIT (DDRD, 3);
 9f8:	81 b3       	in	r24, 0x11	; 17
 9fa:	87 7f       	andi	r24, 0xF7	; 247
 9fc:	81 bb       	out	0x11, r24	; 17
	SETBIT (PORTD, 3);
 9fe:	82 b3       	in	r24, 0x12	; 18
 a00:	88 60       	ori	r24, 0x08	; 8
 a02:	82 bb       	out	0x12, r24	; 18
	CLRBIT (DDRD, 2);
 a04:	81 b3       	in	r24, 0x11	; 17
 a06:	8b 7f       	andi	r24, 0xFB	; 251
 a08:	81 bb       	out	0x11, r24	; 17
	SETBIT (PORTD, 2);
 a0a:	82 b3       	in	r24, 0x12	; 18
 a0c:	84 60       	ori	r24, 0x04	; 4
 a0e:	82 bb       	out	0x12, r24	; 18
	//SETBIT(MCUCR,ISC00);
	//SETBIT(MCUCR,ISC10);
	SETBIT(MCUCR,ISC11);
 a10:	85 b7       	in	r24, 0x35	; 53
 a12:	88 60       	ori	r24, 0x08	; 8
 a14:	85 bf       	out	0x35, r24	; 53
	SETBIT(MCUCR,ISC01);
 a16:	85 b7       	in	r24, 0x35	; 53
 a18:	82 60       	ori	r24, 0x02	; 2
 a1a:	85 bf       	out	0x35, r24	; 53
	SETBIT(GICR,6);
 a1c:	8b b7       	in	r24, 0x3b	; 59
 a1e:	80 64       	ori	r24, 0x40	; 64
 a20:	8b bf       	out	0x3b, r24	; 59
	SETBIT(GICR,7);
 a22:	8b b7       	in	r24, 0x3b	; 59
 a24:	80 68       	ori	r24, 0x80	; 128
 a26:	8b bf       	out	0x3b, r24	; 59
	SETBIT(SREG, 7);
 a28:	8f b7       	in	r24, 0x3f	; 63
 a2a:	80 68       	ori	r24, 0x80	; 128
 a2c:	8f bf       	out	0x3f, r24	; 63
 a2e:	08 95       	ret

00000a30 <__vector_1>:
	
}


ISR(INT0_vect){
 a30:	1f 92       	push	r1
 a32:	0f 92       	push	r0
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	0f 92       	push	r0
 a38:	11 24       	eor	r1, r1
 a3a:	2f 93       	push	r18
 a3c:	3f 93       	push	r19
 a3e:	4f 93       	push	r20
 a40:	5f 93       	push	r21
 a42:	6f 93       	push	r22
 a44:	7f 93       	push	r23
 a46:	8f 93       	push	r24
 a48:	9f 93       	push	r25
 a4a:	af 93       	push	r26
 a4c:	bf 93       	push	r27
 a4e:	ef 93       	push	r30
 a50:	ff 93       	push	r31
	EXTERNAL_ENTERRUPT0_isr();
 a52:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <EXTERNAL_ENTERRUPT0_isr>
 a56:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <EXTERNAL_ENTERRUPT0_isr+0x1>
 a5a:	09 95       	icall
}
 a5c:	ff 91       	pop	r31
 a5e:	ef 91       	pop	r30
 a60:	bf 91       	pop	r27
 a62:	af 91       	pop	r26
 a64:	9f 91       	pop	r25
 a66:	8f 91       	pop	r24
 a68:	7f 91       	pop	r23
 a6a:	6f 91       	pop	r22
 a6c:	5f 91       	pop	r21
 a6e:	4f 91       	pop	r20
 a70:	3f 91       	pop	r19
 a72:	2f 91       	pop	r18
 a74:	0f 90       	pop	r0
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	0f 90       	pop	r0
 a7a:	1f 90       	pop	r1
 a7c:	18 95       	reti

00000a7e <__vector_2>:

ISR(INT1_vect){
 a7e:	1f 92       	push	r1
 a80:	0f 92       	push	r0
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	0f 92       	push	r0
 a86:	11 24       	eor	r1, r1
 a88:	2f 93       	push	r18
 a8a:	3f 93       	push	r19
 a8c:	4f 93       	push	r20
 a8e:	5f 93       	push	r21
 a90:	6f 93       	push	r22
 a92:	7f 93       	push	r23
 a94:	8f 93       	push	r24
 a96:	9f 93       	push	r25
 a98:	af 93       	push	r26
 a9a:	bf 93       	push	r27
 a9c:	ef 93       	push	r30
 a9e:	ff 93       	push	r31
	EXTERNAL_ENTERRUPT1_isr();
 aa0:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <EXTERNAL_ENTERRUPT1_isr>
 aa4:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <EXTERNAL_ENTERRUPT1_isr+0x1>
 aa8:	09 95       	icall
 aaa:	ff 91       	pop	r31
 aac:	ef 91       	pop	r30
 aae:	bf 91       	pop	r27
 ab0:	af 91       	pop	r26
 ab2:	9f 91       	pop	r25
 ab4:	8f 91       	pop	r24
 ab6:	7f 91       	pop	r23
 ab8:	6f 91       	pop	r22
 aba:	5f 91       	pop	r21
 abc:	4f 91       	pop	r20
 abe:	3f 91       	pop	r19
 ac0:	2f 91       	pop	r18
 ac2:	0f 90       	pop	r0
 ac4:	0f be       	out	0x3f, r0	; 63
 ac6:	0f 90       	pop	r0
 ac8:	1f 90       	pop	r1
 aca:	18 95       	reti

00000acc <TIMER0_normaMode_init>:
	SETBIT(DDRB, 3); 
	SETBIT(TCCR0,CS00); 
	SETBIT(TCCR0,FOC0);
	SETBIT(TCCR0,WGM01); 
	SETBIT(TCCR0,COM00);
	OCR0 = oc;
 acc:	83 b7       	in	r24, 0x33	; 51
 ace:	81 60       	ori	r24, 0x01	; 1
 ad0:	83 bf       	out	0x33, r24	; 51
 ad2:	83 b7       	in	r24, 0x33	; 51
 ad4:	80 68       	ori	r24, 0x80	; 128
 ad6:	83 bf       	out	0x33, r24	; 51
 ad8:	08 95       	ret

00000ada <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 ada:	1f 92       	push	r1
 adc:	0f 92       	push	r0
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	0f 92       	push	r0
 ae2:	11 24       	eor	r1, r1
 ae4:	2f 93       	push	r18
 ae6:	3f 93       	push	r19
 ae8:	4f 93       	push	r20
 aea:	5f 93       	push	r21
 aec:	6f 93       	push	r22
 aee:	7f 93       	push	r23
 af0:	8f 93       	push	r24
 af2:	9f 93       	push	r25
 af4:	af 93       	push	r26
 af6:	bf 93       	push	r27
 af8:	ef 93       	push	r30
 afa:	ff 93       	push	r31
	timer0_ovf_isr();
 afc:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <timer0_ovf_isr>
 b00:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <timer0_ovf_isr+0x1>
 b04:	09 95       	icall
}
 b06:	ff 91       	pop	r31
 b08:	ef 91       	pop	r30
 b0a:	bf 91       	pop	r27
 b0c:	af 91       	pop	r26
 b0e:	9f 91       	pop	r25
 b10:	8f 91       	pop	r24
 b12:	7f 91       	pop	r23
 b14:	6f 91       	pop	r22
 b16:	5f 91       	pop	r21
 b18:	4f 91       	pop	r20
 b1a:	3f 91       	pop	r19
 b1c:	2f 91       	pop	r18
 b1e:	0f 90       	pop	r0
 b20:	0f be       	out	0x3f, r0	; 63
 b22:	0f 90       	pop	r0
 b24:	1f 90       	pop	r1
 b26:	18 95       	reti

00000b28 <__vector_10>:

ISR(TIMER0_COMP_vect){
 b28:	1f 92       	push	r1
 b2a:	0f 92       	push	r0
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	0f 92       	push	r0
 b30:	11 24       	eor	r1, r1
 b32:	2f 93       	push	r18
 b34:	3f 93       	push	r19
 b36:	4f 93       	push	r20
 b38:	5f 93       	push	r21
 b3a:	6f 93       	push	r22
 b3c:	7f 93       	push	r23
 b3e:	8f 93       	push	r24
 b40:	9f 93       	push	r25
 b42:	af 93       	push	r26
 b44:	bf 93       	push	r27
 b46:	ef 93       	push	r30
 b48:	ff 93       	push	r31
	timer0_ctc_isr();
 b4a:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <timer0_ctc_isr>
 b4e:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <timer0_ctc_isr+0x1>
 b52:	09 95       	icall
 b54:	ff 91       	pop	r31
 b56:	ef 91       	pop	r30
 b58:	bf 91       	pop	r27
 b5a:	af 91       	pop	r26
 b5c:	9f 91       	pop	r25
 b5e:	8f 91       	pop	r24
 b60:	7f 91       	pop	r23
 b62:	6f 91       	pop	r22
 b64:	5f 91       	pop	r21
 b66:	4f 91       	pop	r20
 b68:	3f 91       	pop	r19
 b6a:	2f 91       	pop	r18
 b6c:	0f 90       	pop	r0
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	0f 90       	pop	r0
 b72:	1f 90       	pop	r1
 b74:	18 95       	reti

00000b76 <TIMER1_normaMode_init>:
	SETBIT(DDRB, 3); 
	SETBIT(TCCR0,CS00); 
	SETBIT(TCCR0,FOC0);
	SETBIT(TCCR0,WGM01); 
	SETBIT(TCCR0,COM00);
	OCR0 = oc;
 b76:	85 b5       	in	r24, 0x25	; 37
 b78:	81 60       	ori	r24, 0x01	; 1
 b7a:	85 bd       	out	0x25, r24	; 37
 b7c:	85 b5       	in	r24, 0x25	; 37
 b7e:	80 68       	ori	r24, 0x80	; 128
 b80:	85 bd       	out	0x25, r24	; 37
 b82:	8f b7       	in	r24, 0x3f	; 63
 b84:	80 68       	ori	r24, 0x80	; 128
 b86:	8f bf       	out	0x3f, r24	; 63
 b88:	08 95       	ret

00000b8a <__vector_5>:
}

ISR(TIMER2_OVF_vect){
 b8a:	1f 92       	push	r1
 b8c:	0f 92       	push	r0
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	0f 92       	push	r0
 b92:	11 24       	eor	r1, r1
 b94:	2f 93       	push	r18
 b96:	3f 93       	push	r19
 b98:	4f 93       	push	r20
 b9a:	5f 93       	push	r21
 b9c:	6f 93       	push	r22
 b9e:	7f 93       	push	r23
 ba0:	8f 93       	push	r24
 ba2:	9f 93       	push	r25
 ba4:	af 93       	push	r26
 ba6:	bf 93       	push	r27
 ba8:	ef 93       	push	r30
 baa:	ff 93       	push	r31
	timer1_ovf_isr();
 bac:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <timer1_ovf_isr>
 bb0:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <timer1_ovf_isr+0x1>
 bb4:	09 95       	icall
}
 bb6:	ff 91       	pop	r31
 bb8:	ef 91       	pop	r30
 bba:	bf 91       	pop	r27
 bbc:	af 91       	pop	r26
 bbe:	9f 91       	pop	r25
 bc0:	8f 91       	pop	r24
 bc2:	7f 91       	pop	r23
 bc4:	6f 91       	pop	r22
 bc6:	5f 91       	pop	r21
 bc8:	4f 91       	pop	r20
 bca:	3f 91       	pop	r19
 bcc:	2f 91       	pop	r18
 bce:	0f 90       	pop	r0
 bd0:	0f be       	out	0x3f, r0	; 63
 bd2:	0f 90       	pop	r0
 bd4:	1f 90       	pop	r1
 bd6:	18 95       	reti

00000bd8 <__vector_4>:

ISR(TIMER2_COMP_vect){
 bd8:	1f 92       	push	r1
 bda:	0f 92       	push	r0
 bdc:	0f b6       	in	r0, 0x3f	; 63
 bde:	0f 92       	push	r0
 be0:	11 24       	eor	r1, r1
 be2:	2f 93       	push	r18
 be4:	3f 93       	push	r19
 be6:	4f 93       	push	r20
 be8:	5f 93       	push	r21
 bea:	6f 93       	push	r22
 bec:	7f 93       	push	r23
 bee:	8f 93       	push	r24
 bf0:	9f 93       	push	r25
 bf2:	af 93       	push	r26
 bf4:	bf 93       	push	r27
 bf6:	ef 93       	push	r30
 bf8:	ff 93       	push	r31
	timer1_ctc_isr();
 bfa:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <timer1_ctc_isr>
 bfe:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <timer1_ctc_isr+0x1>
 c02:	09 95       	icall
 c04:	ff 91       	pop	r31
 c06:	ef 91       	pop	r30
 c08:	bf 91       	pop	r27
 c0a:	af 91       	pop	r26
 c0c:	9f 91       	pop	r25
 c0e:	8f 91       	pop	r24
 c10:	7f 91       	pop	r23
 c12:	6f 91       	pop	r22
 c14:	5f 91       	pop	r21
 c16:	4f 91       	pop	r20
 c18:	3f 91       	pop	r19
 c1a:	2f 91       	pop	r18
 c1c:	0f 90       	pop	r0
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	0f 90       	pop	r0
 c22:	1f 90       	pop	r1
 c24:	18 95       	reti

00000c26 <UART_init>:
*****************************************************************************/
uint8_t UART_Receive()
{
	while(READBIT(UCSRA,RXC)==0);
	return UDR;
}
 c26:	87 e6       	ldi	r24, 0x67	; 103
 c28:	89 b9       	out	0x09, r24	; 9
 c2a:	8a b1       	in	r24, 0x0a	; 10
 c2c:	80 61       	ori	r24, 0x10	; 16
 c2e:	8a b9       	out	0x0a, r24	; 10
 c30:	8a b1       	in	r24, 0x0a	; 10
 c32:	88 60       	ori	r24, 0x08	; 8
 c34:	8a b9       	out	0x0a, r24	; 10
 c36:	8a b1       	in	r24, 0x0a	; 10
 c38:	80 68       	ori	r24, 0x80	; 128
 c3a:	8a b9       	out	0x0a, r24	; 10
 c3c:	8f b7       	in	r24, 0x3f	; 63
 c3e:	80 68       	ori	r24, 0x80	; 128
 c40:	8f bf       	out	0x3f, r24	; 63
 c42:	08 95       	ret

00000c44 <__vector_13>:

ISR(USART_RXC_vect){
 c44:	1f 92       	push	r1
 c46:	0f 92       	push	r0
 c48:	0f b6       	in	r0, 0x3f	; 63
 c4a:	0f 92       	push	r0
 c4c:	11 24       	eor	r1, r1
 c4e:	2f 93       	push	r18
 c50:	3f 93       	push	r19
 c52:	4f 93       	push	r20
 c54:	5f 93       	push	r21
 c56:	6f 93       	push	r22
 c58:	7f 93       	push	r23
 c5a:	8f 93       	push	r24
 c5c:	9f 93       	push	r25
 c5e:	af 93       	push	r26
 c60:	bf 93       	push	r27
 c62:	ef 93       	push	r30
 c64:	ff 93       	push	r31
	
	UART_isr();
 c66:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <UART_isr>
 c6a:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <UART_isr+0x1>
 c6e:	09 95       	icall
	
 c70:	ff 91       	pop	r31
 c72:	ef 91       	pop	r30
 c74:	bf 91       	pop	r27
 c76:	af 91       	pop	r26
 c78:	9f 91       	pop	r25
 c7a:	8f 91       	pop	r24
 c7c:	7f 91       	pop	r23
 c7e:	6f 91       	pop	r22
 c80:	5f 91       	pop	r21
 c82:	4f 91       	pop	r20
 c84:	3f 91       	pop	r19
 c86:	2f 91       	pop	r18
 c88:	0f 90       	pop	r0
 c8a:	0f be       	out	0x3f, r0	; 63
 c8c:	0f 90       	pop	r0
 c8e:	1f 90       	pop	r1
 c90:	18 95       	reti

00000c92 <__udivmodsi4>:
 c92:	a1 e2       	ldi	r26, 0x21	; 33
 c94:	1a 2e       	mov	r1, r26
 c96:	aa 1b       	sub	r26, r26
 c98:	bb 1b       	sub	r27, r27
 c9a:	fd 01       	movw	r30, r26
 c9c:	0d c0       	rjmp	.+26     	; 0xcb8 <__udivmodsi4_ep>

00000c9e <__udivmodsi4_loop>:
 c9e:	aa 1f       	adc	r26, r26
 ca0:	bb 1f       	adc	r27, r27
 ca2:	ee 1f       	adc	r30, r30
 ca4:	ff 1f       	adc	r31, r31
 ca6:	a2 17       	cp	r26, r18
 ca8:	b3 07       	cpc	r27, r19
 caa:	e4 07       	cpc	r30, r20
 cac:	f5 07       	cpc	r31, r21
 cae:	20 f0       	brcs	.+8      	; 0xcb8 <__udivmodsi4_ep>
 cb0:	a2 1b       	sub	r26, r18
 cb2:	b3 0b       	sbc	r27, r19
 cb4:	e4 0b       	sbc	r30, r20
 cb6:	f5 0b       	sbc	r31, r21

00000cb8 <__udivmodsi4_ep>:
 cb8:	66 1f       	adc	r22, r22
 cba:	77 1f       	adc	r23, r23
 cbc:	88 1f       	adc	r24, r24
 cbe:	99 1f       	adc	r25, r25
 cc0:	1a 94       	dec	r1
 cc2:	69 f7       	brne	.-38     	; 0xc9e <__udivmodsi4_loop>
 cc4:	60 95       	com	r22
 cc6:	70 95       	com	r23
 cc8:	80 95       	com	r24
 cca:	90 95       	com	r25
 ccc:	9b 01       	movw	r18, r22
 cce:	ac 01       	movw	r20, r24
 cd0:	bd 01       	movw	r22, r26
 cd2:	cf 01       	movw	r24, r30
 cd4:	08 95       	ret

00000cd6 <_exit>:
 cd6:	f8 94       	cli

00000cd8 <__stop_program>:
 cd8:	ff cf       	rjmp	.-2      	; 0xcd8 <__stop_program>
